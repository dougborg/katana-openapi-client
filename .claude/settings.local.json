{
  "permissions": {
    "allow": [
      "Bash(python scripts/validate_schema_consistency.py:*)",
      "Bash(poetry run:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "Bash(git push)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(gh issue create --title \"Generate Domain Helper Classes for Common Operations\" --body \"$(cat <<''EOF''\n## Overview\n\nAdd auto-generated domain helper classes that provide ergonomic, high-level APIs for common operations while keeping the generated API as the source of truth.\n\n## Motivation\n\nThe current API is excellent for direct, transparent access to all endpoints. However, common operations require boilerplate code. Domain helpers would provide:\n\n1. **Generated CRUD wrappers** - Reduce boilerplate for list/get/create/update/delete operations\n2. **Hand-written domain logic** - Add smart methods for common patterns\n3. **Type-safe convenience** - Full type hints and IDE support\n4. **Backward compatible** - Optional helpers, direct API remains primary\n\n## Example Usage\n\n```python\nasync with KatanaClient() as client:\n    # Current API (keep this!)\n    from katana_public_api_client.api.product import get_all_products\n    response = await get_all_products.asyncio_detailed(\n        client=client,\n        is_sellable=True,\n        include_deleted=False\n    )\n    products = unwrap_data(response)\n\n    # NEW: Domain helpers\n    products = client.products  # or ProductHelper(client)\n    \n    # Generated wrappers (auto-generated from OpenAPI)\n    all_products = await products.list(is_sellable=True)\n    product = await products.get(123)\n    new_product = await products.create({\"name\": \"Widget\", ...})\n    \n    # Hand-written domain logic\n    active_sellable = await products.active_sellable()\n    low_stock = await products.low_stock(threshold=5)\n    search_results = await products.search(\"widget\")\n    \n    # Other resources\n    revenue = await client.sales_orders.revenue_by_period(start, end)\n    in_progress = await client.manufacturing_orders.in_progress()\n```\n\n## Implementation Plan\n\nSee [docs/DOMAIN_HELPERS_DESIGN.md](../blob/main/docs/DOMAIN_HELPERS_DESIGN.md) for complete design.\n\n### Phase 1: Core Infrastructure (1 week)\n- [ ] Create \\`scripts/generate_helpers.py\\`\n- [ ] Parse OpenAPI spec to extract resource groups\n- [ ] Generate helper class templates with CRUD methods\n- [ ] Add to \\`regenerate_client.py\\` workflow\n\n### Phase 2: Initial Helpers (1 week)\n- [ ] Generate ProductHelper with CRUD operations\n- [ ] Generate SalesOrderHelper with CRUD operations\n- [ ] Generate ManufacturingOrderHelper with CRUD operations\n- [ ] Add helper properties to KatanaClient\n- [ ] Write comprehensive tests\n\n### Phase 3: Custom Methods (2 weeks)\n- [ ] Add hand-written domain methods to ProductHelper\n  - \\`active_sellable()\\` - common filter combination\n  - \\`low_stock(threshold)\\` - inventory alerts\n  - \\`search(query)\\` - smart product search\n  - \\`bulk_update(updates)\\` - efficient batch operations\n- [ ] Add domain methods to SalesOrderHelper\n  - \\`open_orders()\\` - common filter\n  - \\`overdue()\\` - orders past due date\n  - \\`by_customer(customer_id)\\` - customer orders\n  - \\`revenue_by_period(start, end)\\` - analytics\n- [ ] Add domain methods to ManufacturingOrderHelper\n  - \\`in_progress()\\` - active manufacturing\n  - \\`production_capacity(start, end)\\` - capacity planning\n  - \\`by_product(product_id)\\` - product-specific orders\n- [ ] Write tests for custom methods\n- [ ] Create examples for each helper\n\n### Phase 4: Documentation (1 week)\n- [ ] Update README with helper examples\n- [ ] Create helper API reference docs\n- [ ] Add cookbook recipes using helpers\n- [ ] Update migration guide\n\n## Benefits\n\n1. ✅ **Auto-generated** - Always in sync with OpenAPI spec\n2. ✅ **Opt-in** - Direct API remains primary, helpers are optional\n3. ✅ **Type-safe** - Full type hints and IDE autocomplete\n4. ✅ **Extensible** - Easy to add domain-specific logic\n5. ✅ **Maintainable** - Clear separation of generated vs. custom code\n6. ✅ **No breaking changes** - Purely additive feature\n\n## Resources\n\n- Full design doc: [docs/DOMAIN_HELPERS_DESIGN.md](../blob/main/docs/DOMAIN_HELPERS_DESIGN.md)\n- Builder pattern analysis: [docs/BUILDER_PATTERN_ANALYSIS.md](../blob/main/docs/BUILDER_PATTERN_ANALYSIS.md)\n\n## Success Metrics\n\n- [ ] 3+ core helpers implemented (products, sales orders, manufacturing orders)\n- [ ] 10+ custom domain methods across helpers\n- [ ] 80%+ test coverage for helper code\n- [ ] Documentation with examples for each helper\n- [ ] Positive user feedback on ergonomics\n\n## Estimated Effort\n\n**Total: 4-5 weeks**\n- Core infrastructure: 1 week\n- Initial helpers: 1 week  \n- Custom methods: 2 weeks\n- Documentation: 1 week\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}
