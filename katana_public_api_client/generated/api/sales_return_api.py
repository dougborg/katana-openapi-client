# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401

from pydantic import validate_arguments
from typing import Optional

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist


from katana_public_api_client.generated.models.create_sales_return_request import CreateSalesReturnRequest
from katana_public_api_client.generated.models.sales_return import SalesReturn
from katana_public_api_client.generated.models.sales_return_list_response import SalesReturnListResponse

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SalesReturnApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_sales_return(self, create_sales_return_request : Annotated[CreateSalesReturnRequest, Field(..., description="Sales return details")], **kwargs) -> SalesReturn:  # noqa: E501
        """Create a sales return  # noqa: E501

        Creates a new sales return object.  # noqa: E501

        :param create_sales_return_request: Sales return details (required)
        :type create_sales_return_request: CreateSalesReturnRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SalesReturn
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_sales_return_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_sales_return_with_http_info(create_sales_return_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def create_sales_return_with_http_info(self, create_sales_return_request : Annotated[CreateSalesReturnRequest, Field(..., description="Sales return details")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a sales return  # noqa: E501

        Creates a new sales return object.  # noqa: E501

        :param create_sales_return_request: Sales return details (required)
        :type create_sales_return_request: CreateSalesReturnRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SalesReturn, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_sales_return_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sales_return" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_sales_return_request'] is not None:
            _body_params = _params['create_sales_return_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "SalesReturn",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/sales_returns', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def get_all_sales_returns(self, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, customer_id : Annotated[Optional[StrictInt], Field(description="Filter by customer ID")] = None, sales_order_id : Annotated[Optional[StrictInt], Field(description="Filter by original sales order ID")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter by return status")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, **kwargs) -> SalesReturnListResponse:  # noqa: E501
        """List all sales returns  # noqa: E501

        Returns a list of sales returns you've previously created. The sales returns are returned in sorted order, with the most recent sales return appearing first.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param customer_id: Filter by customer ID
        :type customer_id: int
        :param sales_order_id: Filter by original sales order ID
        :type sales_order_id: int
        :param status: Filter by return status
        :type status: str
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SalesReturnListResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_sales_returns_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_all_sales_returns_with_http_info(limit, page, ids, customer_id, sales_order_id, status, include_deleted, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_all_sales_returns_with_http_info(self, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, customer_id : Annotated[Optional[StrictInt], Field(description="Filter by customer ID")] = None, sales_order_id : Annotated[Optional[StrictInt], Field(description="Filter by original sales order ID")] = None, status : Annotated[Optional[StrictStr], Field(description="Filter by return status")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all sales returns  # noqa: E501

        Returns a list of sales returns you've previously created. The sales returns are returned in sorted order, with the most recent sales return appearing first.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param customer_id: Filter by customer ID
        :type customer_id: int
        :param sales_order_id: Filter by original sales order ID
        :type sales_order_id: int
        :param status: Filter by return status
        :type status: str
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SalesReturnListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'limit',
            'page',
            'ids',
            'customer_id',
            'sales_order_id',
            'status',
            'include_deleted'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_sales_returns" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))
            _collection_formats['ids'] = 'multi'

        if _params.get('customer_id') is not None:  # noqa: E501
            _query_params.append(('customer_id', _params['customer_id']))

        if _params.get('sales_order_id') is not None:  # noqa: E501
            _query_params.append(('sales_order_id', _params['sales_order_id']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('include_deleted') is not None:  # noqa: E501
            _query_params.append(('include_deleted', _params['include_deleted']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "SalesReturnListResponse",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/sales_returns', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def get_sales_return(self, id : Annotated[StrictInt, Field(..., description="Sales return ID")], **kwargs) -> SalesReturn:  # noqa: E501
        """Retrieve a sales return  # noqa: E501

        Retrieves a sales return by ID.  # noqa: E501

        :param id: Sales return ID (required)
        :type id: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SalesReturn
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_sales_return_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_sales_return_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_sales_return_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Sales return ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a sales return  # noqa: E501

        Retrieves a sales return by ID.  # noqa: E501

        :param id: Sales return ID (required)
        :type id: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SalesReturn, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sales_return" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "SalesReturn",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/sales_returns/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
