"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import re  # noqa: F401
from typing import Annotated

from pydantic import Field, StrictInt, conlist, validate_arguments

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from katana_public_api_client.generated.models.create_sales_order_shipping_fee_request import (
    CreateSalesOrderShippingFeeRequest,
)
from katana_public_api_client.generated.models.sales_order_accounting_metadata_list_response import (
    SalesOrderAccountingMetadataListResponse,
)
from katana_public_api_client.generated.models.sales_order_shipping_fee import (
    SalesOrderShippingFee,
)
from katana_public_api_client.generated.models.sales_order_shipping_fee_list_response import (
    SalesOrderShippingFeeListResponse,
)


class SalesOrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_sales_order_shipping_fee(
        self,
        create_sales_order_shipping_fee_request: Annotated[
            CreateSalesOrderShippingFeeRequest,
            Field(..., description="Shipping fee details"),
        ],
        **kwargs,
    ) -> SalesOrderShippingFee:
        """Create a sales order shipping fee  # noqa: E501

        Creates a sales order shipping fee and adds it to a sales order.  # noqa: E501

        :param create_sales_order_shipping_fee_request: Shipping fee details (required)
        :type create_sales_order_shipping_fee_request: CreateSalesOrderShippingFeeRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SalesOrderShippingFee
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_sales_order_shipping_fee_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.create_sales_order_shipping_fee_with_http_info(
            create_sales_order_shipping_fee_request, **kwargs
        )

    @validate_arguments
    async def create_sales_order_shipping_fee_with_http_info(
        self,
        create_sales_order_shipping_fee_request: Annotated[
            CreateSalesOrderShippingFeeRequest,
            Field(..., description="Shipping fee details"),
        ],
        **kwargs,
    ) -> ApiResponse:
        """Create a sales order shipping fee  # noqa: E501

        Creates a sales order shipping fee and adds it to a sales order.  # noqa: E501

        :param create_sales_order_shipping_fee_request: Shipping fee details (required)
        :type create_sales_order_shipping_fee_request: CreateSalesOrderShippingFeeRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SalesOrderShippingFee, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_sales_order_shipping_fee_request"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sales_order_shipping_fee" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_sales_order_shipping_fee_request"] is not None:
            _body_params = _params["create_sales_order_shipping_fee_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "201": "SalesOrderShippingFee",
            "400": "ErrorResponse",
            "401": "ErrorResponse",
            "422": "DetailedErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/sales_order_shipping_fee",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_sales_order_accounting_metadata(
        self,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of IDs."),
        ] = None,
        sales_order_id: Annotated[
            StrictInt | None, Field(description="Filter by sales order ID")
        ] = None,
        **kwargs,
    ) -> SalesOrderAccountingMetadataListResponse:
        """List sales order accounting metadata  # noqa: E501

        Retrieves accounting metadata for sales orders.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param sales_order_id: Filter by sales order ID
        :type sales_order_id: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SalesOrderAccountingMetadataListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_sales_order_accounting_metadata_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.get_sales_order_accounting_metadata_with_http_info(
            limit, page, ids, sales_order_id, **kwargs
        )

    @validate_arguments
    async def get_sales_order_accounting_metadata_with_http_info(
        self,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of IDs."),
        ] = None,
        sales_order_id: Annotated[
            StrictInt | None, Field(description="Filter by sales order ID")
        ] = None,
        **kwargs,
    ) -> ApiResponse:
        """List sales order accounting metadata  # noqa: E501

        Retrieves accounting metadata for sales orders.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param sales_order_id: Filter by sales order ID
        :type sales_order_id: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SalesOrderAccountingMetadataListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["limit", "page", "ids", "sales_order_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sales_order_accounting_metadata" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:
            _query_params.append(("limit", _params["limit"]))

        if _params.get("page") is not None:
            _query_params.append(("page", _params["page"]))

        if _params.get("ids") is not None:
            _query_params.append(("ids", _params["ids"]))
            _collection_formats["ids"] = "multi"

        if _params.get("sales_order_id") is not None:
            _query_params.append(("sales_order_id", _params["sales_order_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "200": "SalesOrderAccountingMetadataListResponse",
            "401": "ErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/sales_order_accounting_metadata",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_sales_order_shipping_fees(
        self,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of IDs."),
        ] = None,
        sales_order_id: Annotated[
            StrictInt | None, Field(description="Filter by sales order ID")
        ] = None,
        **kwargs,
    ) -> SalesOrderShippingFeeListResponse:
        """List sales order shipping fees  # noqa: E501

        Retrieves shipping fees for sales orders.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param sales_order_id: Filter by sales order ID
        :type sales_order_id: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SalesOrderShippingFeeListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_sales_order_shipping_fees_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.get_sales_order_shipping_fees_with_http_info(
            limit, page, ids, sales_order_id, **kwargs
        )

    @validate_arguments
    async def get_sales_order_shipping_fees_with_http_info(
        self,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of IDs."),
        ] = None,
        sales_order_id: Annotated[
            StrictInt | None, Field(description="Filter by sales order ID")
        ] = None,
        **kwargs,
    ) -> ApiResponse:
        """List sales order shipping fees  # noqa: E501

        Retrieves shipping fees for sales orders.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param sales_order_id: Filter by sales order ID
        :type sales_order_id: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SalesOrderShippingFeeListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["limit", "page", "ids", "sales_order_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sales_order_shipping_fees" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:
            _query_params.append(("limit", _params["limit"]))

        if _params.get("page") is not None:
            _query_params.append(("page", _params["page"]))

        if _params.get("ids") is not None:
            _query_params.append(("ids", _params["ids"]))
            _collection_formats["ids"] = "multi"

        if _params.get("sales_order_id") is not None:
            _query_params.append(("sales_order_id", _params["sales_order_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "200": "SalesOrderShippingFeeListResponse",
            "401": "ErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/sales_order_shipping_fee",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
