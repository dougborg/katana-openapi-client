# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401

from pydantic import validate_arguments

from typing_extensions import Annotated
from pydantic import Field, conlist

from katana_public_api_client.generated.models.unlink_variant_bin_location_request import (
    UnlinkVariantBinLocationRequest,
)
from katana_public_api_client.generated.models.variant_default_storage_bin_link import (
    VariantDefaultStorageBinLink,
)
from katana_public_api_client.generated.models.variant_default_storage_bin_link_list_response import (
    VariantDefaultStorageBinLinkListResponse,
)

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class VariantDefaultStorageBinApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def link_variant_default_storage_bins(
        self,
        variant_default_storage_bin_link: Annotated[
            VariantDefaultStorageBinLink,
            Field(..., description="Linked variant default storage bin details"),
        ],
        **kwargs,
    ) -> VariantDefaultStorageBinLinkListResponse:  # noqa: E501
        """Link variant default storage bins  # noqa: E501

        Bulk operation for linking variants with the default storage bins. In case the default storage bin doesn't yet exist, it will be created and linked to the variant. This endpoint can also be used for changing existing links of the variants to different storage bins.  The endpoint accepts up to 500 variant storage bin objects.  # noqa: E501

        :param variant_default_storage_bin_link: Linked variant default storage bin details (required)
        :type variant_default_storage_bin_link: VariantDefaultStorageBinLink
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VariantDefaultStorageBinLinkListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the link_variant_default_storage_bins_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.link_variant_default_storage_bins_with_http_info(
            variant_default_storage_bin_link, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def link_variant_default_storage_bins_with_http_info(
        self,
        variant_default_storage_bin_link: Annotated[
            VariantDefaultStorageBinLink,
            Field(..., description="Linked variant default storage bin details"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Link variant default storage bins  # noqa: E501

        Bulk operation for linking variants with the default storage bins. In case the default storage bin doesn't yet exist, it will be created and linked to the variant. This endpoint can also be used for changing existing links of the variants to different storage bins.  The endpoint accepts up to 500 variant storage bin objects.  # noqa: E501

        :param variant_default_storage_bin_link: Linked variant default storage bin details (required)
        :type variant_default_storage_bin_link: VariantDefaultStorageBinLink
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VariantDefaultStorageBinLinkListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["variant_default_storage_bin_link"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_variant_default_storage_bins" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["variant_default_storage_bin_link"] is not None:
            _body_params = _params["variant_default_storage_bin_link"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {
            "200": "VariantDefaultStorageBinLinkListResponse",
            "401": "ErrorResponse",
            "422": "DetailedErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/variant_bin_locations",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def unlink_variant_default_storage_bins(
        self,
        unlink_variant_bin_location_request: Annotated[
            conlist(UnlinkVariantBinLocationRequest, max_items=150, min_items=1),
            Field(..., description="Unlinked variant default storage bin details"),
        ],
        **kwargs,
    ) -> None:  # noqa: E501
        """Unlink variant default storage bins  # noqa: E501

        Bulk operation for unlinking variants from the default storage bins available in a specific location.   The endpoint accepts up to 500 variant bin location objects.  # noqa: E501

        :param unlink_variant_bin_location_request: Unlinked variant default storage bin details (required)
        :type unlink_variant_bin_location_request: List[UnlinkVariantBinLocationRequest]
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the unlink_variant_default_storage_bins_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.unlink_variant_default_storage_bins_with_http_info(
            unlink_variant_bin_location_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def unlink_variant_default_storage_bins_with_http_info(
        self,
        unlink_variant_bin_location_request: Annotated[
            conlist(UnlinkVariantBinLocationRequest, max_items=150, min_items=1),
            Field(..., description="Unlinked variant default storage bin details"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Unlink variant default storage bins  # noqa: E501

        Bulk operation for unlinking variants from the default storage bins available in a specific location.   The endpoint accepts up to 500 variant bin location objects.  # noqa: E501

        :param unlink_variant_bin_location_request: Unlinked variant default storage bin details (required)
        :type unlink_variant_bin_location_request: List[UnlinkVariantBinLocationRequest]
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["unlink_variant_bin_location_request"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_variant_default_storage_bins" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["unlink_variant_bin_location_request"] is not None:
            _body_params = _params["unlink_variant_bin_location_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearerAuth"]  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            "/unlink_variant_bin_locations",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
