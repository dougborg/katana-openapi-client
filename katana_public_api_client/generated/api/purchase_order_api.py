# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator

from typing import Optional, Union

from katana_public_api_client.generated.models.create_purchase_order_request import CreatePurchaseOrderRequest
from katana_public_api_client.generated.models.purchase_order import PurchaseOrder
from katana_public_api_client.generated.models.purchase_order_list_response import PurchaseOrderListResponse
from katana_public_api_client.generated.models.purchase_order_receive_request import PurchaseOrderReceiveRequest
from katana_public_api_client.generated.models.update_purchase_order_request import UpdatePurchaseOrderRequest

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PurchaseOrderApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_purchase_order(self, create_purchase_order_request : Annotated[CreatePurchaseOrderRequest, Field(..., description="new purchase order details")], **kwargs) -> PurchaseOrder:  # noqa: E501
        """Create a purchase order  # noqa: E501

        Creates a new purchase order object.  # noqa: E501

        :param create_purchase_order_request: new purchase order details (required)
        :type create_purchase_order_request: CreatePurchaseOrderRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PurchaseOrder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_purchase_order_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_purchase_order_with_http_info(create_purchase_order_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def create_purchase_order_with_http_info(self, create_purchase_order_request : Annotated[CreatePurchaseOrderRequest, Field(..., description="new purchase order details")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a purchase order  # noqa: E501

        Creates a new purchase order object.  # noqa: E501

        :param create_purchase_order_request: new purchase order details (required)
        :type create_purchase_order_request: CreatePurchaseOrderRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PurchaseOrder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_purchase_order_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_purchase_order" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_purchase_order_request'] is not None:
            _body_params = _params['create_purchase_order_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "PurchaseOrder",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/purchase_orders', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def delete_purchase_order(self, id : Annotated[StrictInt, Field(..., description="Purchase order id")], **kwargs) -> None:  # noqa: E501
        """Delete purchase order  # noqa: E501

        Deletes a single purchase order by id.  # noqa: E501

        :param id: Purchase order id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_purchase_order_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.delete_purchase_order_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    async def delete_purchase_order_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Purchase order id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete purchase order  # noqa: E501

        Deletes a single purchase order by id.  # noqa: E501

        :param id: Purchase order id (required)
        :type id: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_purchase_order" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/purchase_orders/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def find_purchase_orders(self, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, order_no : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by an order number")] = None, entity_type : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by an entity type")] = None, status : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by a status")] = None, billing_status : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by a billing status")] = None, currency : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by a currency")] = None, location_id : Annotated[Optional[StrictInt], Field(description="Filters results by a location ID.")] = None, tracking_location_id : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters purchase orders by a tracking location")] = None, supplier_id : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters purchase orders by a supplier")] = None, extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, created_at_min : Annotated[Optional[datetime], Field(description="Minimum creation date (ISO 8601 format).")] = None, created_at_max : Annotated[Optional[datetime], Field(description="Maximum creation date (ISO 8601 format).")] = None, updated_at_min : Annotated[Optional[datetime], Field(description="Minimum update date (ISO 8601 format).")] = None, updated_at_max : Annotated[Optional[datetime], Field(description="Maximum update date (ISO 8601 format).")] = None, **kwargs) -> PurchaseOrderListResponse:  # noqa: E501
        """List all purchase orders  # noqa: E501

        Returns a list of purchase orders you've previously created. The purchase orders are returned in sorted     order, with the most recent purchase orders appearing first.  # noqa: E501

        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param order_no: Filters purchase orders by an order number
        :type order_no: str
        :param entity_type: Filters purchase orders by an entity type
        :type entity_type: str
        :param status: Filters purchase orders by a status
        :type status: str
        :param billing_status: Filters purchase orders by a billing status
        :type billing_status: str
        :param currency: Filters purchase orders by a currency
        :type currency: str
        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param tracking_location_id: Filters purchase orders by a tracking location
        :type tracking_location_id: float
        :param supplier_id: Filters purchase orders by a supplier
        :type supplier_id: float
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param created_at_min: Minimum creation date (ISO 8601 format).
        :type created_at_min: datetime
        :param created_at_max: Maximum creation date (ISO 8601 format).
        :type created_at_max: datetime
        :param updated_at_min: Minimum update date (ISO 8601 format).
        :type updated_at_min: datetime
        :param updated_at_max: Maximum update date (ISO 8601 format).
        :type updated_at_max: datetime
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PurchaseOrderListResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the find_purchase_orders_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.find_purchase_orders_with_http_info(ids, order_no, entity_type, status, billing_status, currency, location_id, tracking_location_id, supplier_id, extend, include_deleted, limit, page, created_at_min, created_at_max, updated_at_min, updated_at_max, **kwargs)  # noqa: E501

    @validate_arguments
    async def find_purchase_orders_with_http_info(self, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, order_no : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by an order number")] = None, entity_type : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by an entity type")] = None, status : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by a status")] = None, billing_status : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by a billing status")] = None, currency : Annotated[Optional[StrictStr], Field(description="Filters purchase orders by a currency")] = None, location_id : Annotated[Optional[StrictInt], Field(description="Filters results by a location ID.")] = None, tracking_location_id : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters purchase orders by a tracking location")] = None, supplier_id : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters purchase orders by a supplier")] = None, extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, created_at_min : Annotated[Optional[datetime], Field(description="Minimum creation date (ISO 8601 format).")] = None, created_at_max : Annotated[Optional[datetime], Field(description="Maximum creation date (ISO 8601 format).")] = None, updated_at_min : Annotated[Optional[datetime], Field(description="Minimum update date (ISO 8601 format).")] = None, updated_at_max : Annotated[Optional[datetime], Field(description="Maximum update date (ISO 8601 format).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all purchase orders  # noqa: E501

        Returns a list of purchase orders you've previously created. The purchase orders are returned in sorted     order, with the most recent purchase orders appearing first.  # noqa: E501

        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param order_no: Filters purchase orders by an order number
        :type order_no: str
        :param entity_type: Filters purchase orders by an entity type
        :type entity_type: str
        :param status: Filters purchase orders by a status
        :type status: str
        :param billing_status: Filters purchase orders by a billing status
        :type billing_status: str
        :param currency: Filters purchase orders by a currency
        :type currency: str
        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param tracking_location_id: Filters purchase orders by a tracking location
        :type tracking_location_id: float
        :param supplier_id: Filters purchase orders by a supplier
        :type supplier_id: float
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param created_at_min: Minimum creation date (ISO 8601 format).
        :type created_at_min: datetime
        :param created_at_max: Maximum creation date (ISO 8601 format).
        :type created_at_max: datetime
        :param updated_at_min: Minimum update date (ISO 8601 format).
        :type updated_at_min: datetime
        :param updated_at_max: Maximum update date (ISO 8601 format).
        :type updated_at_max: datetime
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PurchaseOrderListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ids',
            'order_no',
            'entity_type',
            'status',
            'billing_status',
            'currency',
            'location_id',
            'tracking_location_id',
            'supplier_id',
            'extend',
            'include_deleted',
            'limit',
            'page',
            'created_at_min',
            'created_at_max',
            'updated_at_min',
            'updated_at_max'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_purchase_orders" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))
            _collection_formats['ids'] = 'multi'

        if _params.get('order_no') is not None:  # noqa: E501
            _query_params.append(('order_no', _params['order_no']))

        if _params.get('entity_type') is not None:  # noqa: E501
            _query_params.append(('entity_type', _params['entity_type']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('billing_status') is not None:  # noqa: E501
            _query_params.append(('billing_status', _params['billing_status']))

        if _params.get('currency') is not None:  # noqa: E501
            _query_params.append(('currency', _params['currency']))

        if _params.get('location_id') is not None:  # noqa: E501
            _query_params.append(('location_id', _params['location_id']))

        if _params.get('tracking_location_id') is not None:  # noqa: E501
            _query_params.append(('tracking_location_id', _params['tracking_location_id']))

        if _params.get('supplier_id') is not None:  # noqa: E501
            _query_params.append(('supplier_id', _params['supplier_id']))

        if _params.get('extend') is not None:  # noqa: E501
            _query_params.append(('extend', _params['extend']))
            _collection_formats['extend'] = 'multi'

        if _params.get('include_deleted') is not None:  # noqa: E501
            _query_params.append(('include_deleted', _params['include_deleted']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('created_at_min') is not None:  # noqa: E501
            if isinstance(_params['created_at_min'], datetime):
                _query_params.append(('created_at_min', _params['created_at_min'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_min', _params['created_at_min']))

        if _params.get('created_at_max') is not None:  # noqa: E501
            if isinstance(_params['created_at_max'], datetime):
                _query_params.append(('created_at_max', _params['created_at_max'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_max', _params['created_at_max']))

        if _params.get('updated_at_min') is not None:  # noqa: E501
            if isinstance(_params['updated_at_min'], datetime):
                _query_params.append(('updated_at_min', _params['updated_at_min'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_at_min', _params['updated_at_min']))

        if _params.get('updated_at_max') is not None:  # noqa: E501
            if isinstance(_params['updated_at_max'], datetime):
                _query_params.append(('updated_at_max', _params['updated_at_max'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_at_max', _params['updated_at_max']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "PurchaseOrderListResponse",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/purchase_orders', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def get_purchase_order(self, id : Annotated[StrictInt, Field(..., description="Purchase order id")], extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, **kwargs) -> PurchaseOrder:  # noqa: E501
        """Retrieve a purchase order  # noqa: E501

        Retrieves the details of an existing purchase order based on ID  # noqa: E501

        :param id: Purchase order id (required)
        :type id: int
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PurchaseOrder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_purchase_order_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_purchase_order_with_http_info(id, extend, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_purchase_order_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Purchase order id")], extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a purchase order  # noqa: E501

        Retrieves the details of an existing purchase order based on ID  # noqa: E501

        :param id: Purchase order id (required)
        :type id: int
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PurchaseOrder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'extend'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_purchase_order" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('extend') is not None:  # noqa: E501
            _query_params.append(('extend', _params['extend']))
            _collection_formats['extend'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "PurchaseOrder",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/purchase_orders/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def receive_purchase_order(self, purchase_order_receive_request : Annotated[PurchaseOrderReceiveRequest, Field(..., description="receive purchase order rows details")], **kwargs) -> None:  # noqa: E501
        """Receive a purchase order  # noqa: E501

        If you receive the items on the purchase order, you can mark the purchase order as received.     This will update the existing purchase order rows quantities to the quantities left unreceived and     create a new rows with the received quantities and dates. If you want to mark all rows as received and     the order doesn't contain batch tracked items, you can use PATCH /purchase_orders/id endpoint.     Reverting the receive must also be done through that endpoint.  # noqa: E501

        :param purchase_order_receive_request: receive purchase order rows details (required)
        :type purchase_order_receive_request: PurchaseOrderReceiveRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the receive_purchase_order_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.receive_purchase_order_with_http_info(purchase_order_receive_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def receive_purchase_order_with_http_info(self, purchase_order_receive_request : Annotated[PurchaseOrderReceiveRequest, Field(..., description="receive purchase order rows details")], **kwargs) -> ApiResponse:  # noqa: E501
        """Receive a purchase order  # noqa: E501

        If you receive the items on the purchase order, you can mark the purchase order as received.     This will update the existing purchase order rows quantities to the quantities left unreceived and     create a new rows with the received quantities and dates. If you want to mark all rows as received and     the order doesn't contain batch tracked items, you can use PATCH /purchase_orders/id endpoint.     Reverting the receive must also be done through that endpoint.  # noqa: E501

        :param purchase_order_receive_request: receive purchase order rows details (required)
        :type purchase_order_receive_request: PurchaseOrderReceiveRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'purchase_order_receive_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method receive_purchase_order" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['purchase_order_receive_request'] is not None:
            _body_params = _params['purchase_order_receive_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/purchase_order_receive', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def update_purchase_order(self, id : Annotated[StrictInt, Field(..., description="Purchase order id")], update_purchase_order_request : Annotated[UpdatePurchaseOrderRequest, Field(..., description="Purchase order fields to be updated with new values")], **kwargs) -> PurchaseOrder:  # noqa: E501
        """Update a purchase order  # noqa: E501

        Updates the specified purchase order by setting the values of the parameters passed.     Any parameters not provided will be left unchanged.  # noqa: E501

        :param id: Purchase order id (required)
        :type id: int
        :param update_purchase_order_request: Purchase order fields to be updated with new values (required)
        :type update_purchase_order_request: UpdatePurchaseOrderRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PurchaseOrder
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_purchase_order_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.update_purchase_order_with_http_info(id, update_purchase_order_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def update_purchase_order_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Purchase order id")], update_purchase_order_request : Annotated[UpdatePurchaseOrderRequest, Field(..., description="Purchase order fields to be updated with new values")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a purchase order  # noqa: E501

        Updates the specified purchase order by setting the values of the parameters passed.     Any parameters not provided will be left unchanged.  # noqa: E501

        :param id: Purchase order id (required)
        :type id: int
        :param update_purchase_order_request: Purchase order fields to be updated with new values (required)
        :type update_purchase_order_request: UpdatePurchaseOrderRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PurchaseOrder, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'update_purchase_order_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_purchase_order" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_purchase_order_request'] is not None:
            _body_params = _params['update_purchase_order_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "PurchaseOrder",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/purchase_orders/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
