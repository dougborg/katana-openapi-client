"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import re  # noqa: F401
from typing import Annotated

from pydantic import (
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    conlist,
    validate_arguments,
)

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from katana_public_api_client.generated.models.inventory_list_response import (
    InventoryListResponse,
)
from katana_public_api_client.generated.models.inventory_reorder_point_list_response import (
    InventoryReorderPointListResponse,
)
from katana_public_api_client.generated.models.inventory_safety_stock_level import (
    InventorySafetyStockLevel,
)
from katana_public_api_client.generated.models.negative_stock_list_response import (
    NegativeStockListResponse,
)


class InventoryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_inventory_safety_stock_level(
        self,
        inventory_safety_stock_level: Annotated[
            InventorySafetyStockLevel,
            Field(..., description="New inventory safety stock level details."),
        ],
        **kwargs,
    ) -> InventorySafetyStockLevel:
        """Update the safety stock level  # noqa: E501

        Update an item's safety stock level within a certain location and variant combination.  # noqa: E501

        :param inventory_safety_stock_level: New inventory safety stock level details. (required)
        :type inventory_safety_stock_level: InventorySafetyStockLevel
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InventorySafetyStockLevel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_inventory_safety_stock_level_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.create_inventory_safety_stock_level_with_http_info(
            inventory_safety_stock_level, **kwargs
        )

    @validate_arguments
    async def create_inventory_safety_stock_level_with_http_info(
        self,
        inventory_safety_stock_level: Annotated[
            InventorySafetyStockLevel,
            Field(..., description="New inventory safety stock level details."),
        ],
        **kwargs,
    ) -> ApiResponse:
        """Update the safety stock level  # noqa: E501

        Update an item's safety stock level within a certain location and variant combination.  # noqa: E501

        :param inventory_safety_stock_level: New inventory safety stock level details. (required)
        :type inventory_safety_stock_level: InventorySafetyStockLevel
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InventorySafetyStockLevel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["inventory_safety_stock_level"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_inventory_safety_stock_level" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["inventory_safety_stock_level"] is not None:
            _body_params = _params["inventory_safety_stock_level"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "200": "InventorySafetyStockLevel",
            "401": "ErrorResponse",
            "422": "DetailedErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/inventory_safety_stock_levels",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_all_inventory_point(
        self,
        location_id: Annotated[
            StrictInt | None, Field(description="Filters results by a location ID.")
        ] = None,
        variant_id: Annotated[
            StrictInt | None,
            Field(description="Filters results by a valid variant id."),
        ] = None,
        include_archived: Annotated[
            StrictBool | None, Field(description="Includes archived results.")
        ] = None,
        ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of IDs."),
        ] = None,
        extend: Annotated[
            conlist(StrictStr) | None,
            Field(description="Array of objects to extend the response."),
        ] = None,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        **kwargs,
    ) -> InventoryListResponse:
        """List current inventory  # noqa: E501

        Returns a list for current inventory. The inventory is returned in sorted order, with the oldest locations appearing first.   # noqa: E501

        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param variant_id: Filters results by a valid variant id.
        :type variant_id: int
        :param include_archived: Includes archived results.
        :type include_archived: bool
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InventoryListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_all_inventory_point_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.get_all_inventory_point_with_http_info(
            location_id,
            variant_id,
            include_archived,
            ids,
            extend,
            limit,
            page,
            **kwargs,
        )

    @validate_arguments
    async def get_all_inventory_point_with_http_info(
        self,
        location_id: Annotated[
            StrictInt | None, Field(description="Filters results by a location ID.")
        ] = None,
        variant_id: Annotated[
            StrictInt | None,
            Field(description="Filters results by a valid variant id."),
        ] = None,
        include_archived: Annotated[
            StrictBool | None, Field(description="Includes archived results.")
        ] = None,
        ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of IDs."),
        ] = None,
        extend: Annotated[
            conlist(StrictStr) | None,
            Field(description="Array of objects to extend the response."),
        ] = None,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        **kwargs,
    ) -> ApiResponse:
        """List current inventory  # noqa: E501

        Returns a list for current inventory. The inventory is returned in sorted order, with the oldest locations appearing first.   # noqa: E501

        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param variant_id: Filters results by a valid variant id.
        :type variant_id: int
        :param include_archived: Includes archived results.
        :type include_archived: bool
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InventoryListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "location_id",
            "variant_id",
            "include_archived",
            "ids",
            "extend",
            "limit",
            "page",
        ]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_inventory_point" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("location_id") is not None:
            _query_params.append(("location_id", _params["location_id"]))

        if _params.get("variant_id") is not None:
            _query_params.append(("variant_id", _params["variant_id"]))

        if _params.get("include_archived") is not None:
            _query_params.append(("include_archived", _params["include_archived"]))

        if _params.get("ids") is not None:
            _query_params.append(("ids", _params["ids"]))
            _collection_formats["ids"] = "multi"

        if _params.get("extend") is not None:
            _query_params.append(("extend", _params["extend"]))
            _collection_formats["extend"] = "multi"

        if _params.get("limit") is not None:
            _query_params.append(("limit", _params["limit"]))

        if _params.get("page") is not None:
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "200": "InventoryListResponse",
            "401": "ErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/inventory",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_all_negative_stock(
        self,
        location_id: Annotated[
            StrictInt | None, Field(description="Filters results by a location ID.")
        ] = None,
        variant_id: Annotated[
            StrictInt | None,
            Field(description="Filters results by a valid variant id."),
        ] = None,
        latest_negative_stock_date_max: Annotated[
            StrictStr | None,
            Field(
                description="Filters negative stock by a latest negative stock date max"
            ),
        ] = None,
        latest_negative_stock_date_min: Annotated[
            StrictStr | None,
            Field(
                description="Filters negative stock by a latest negative stock date min"
            ),
        ] = None,
        name: Annotated[
            StrictStr | None, Field(description="Filters additional costs by a name")
        ] = None,
        sku: Annotated[
            StrictStr | None, Field(description="Filters results by a sku")
        ] = None,
        category: Annotated[
            StrictStr | None,
            Field(description="Filters negative stock by a category"),
        ] = None,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        **kwargs,
    ) -> NegativeStockListResponse:
        """List all variants with negative stock  # noqa: E501

        Returns a list of variants with negative stock balance.   Each variant has a date of the latest stock movement that resulted in negative stock balance.  # noqa: E501

        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param variant_id: Filters results by a valid variant id.
        :type variant_id: int
        :param latest_negative_stock_date_max: Filters negative stock by a latest negative stock date max
        :type latest_negative_stock_date_max: str
        :param latest_negative_stock_date_min: Filters negative stock by a latest negative stock date min
        :type latest_negative_stock_date_min: str
        :param name: Filters additional costs by a name
        :type name: str
        :param sku: Filters results by a sku
        :type sku: str
        :param category: Filters negative stock by a category
        :type category: str
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NegativeStockListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_all_negative_stock_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.get_all_negative_stock_with_http_info(
            location_id,
            variant_id,
            latest_negative_stock_date_max,
            latest_negative_stock_date_min,
            name,
            sku,
            category,
            limit,
            page,
            **kwargs,
        )

    @validate_arguments
    async def get_all_negative_stock_with_http_info(
        self,
        location_id: Annotated[
            StrictInt | None, Field(description="Filters results by a location ID.")
        ] = None,
        variant_id: Annotated[
            StrictInt | None,
            Field(description="Filters results by a valid variant id."),
        ] = None,
        latest_negative_stock_date_max: Annotated[
            StrictStr | None,
            Field(
                description="Filters negative stock by a latest negative stock date max"
            ),
        ] = None,
        latest_negative_stock_date_min: Annotated[
            StrictStr | None,
            Field(
                description="Filters negative stock by a latest negative stock date min"
            ),
        ] = None,
        name: Annotated[
            StrictStr | None, Field(description="Filters additional costs by a name")
        ] = None,
        sku: Annotated[
            StrictStr | None, Field(description="Filters results by a sku")
        ] = None,
        category: Annotated[
            StrictStr | None,
            Field(description="Filters negative stock by a category"),
        ] = None,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        **kwargs,
    ) -> ApiResponse:
        """List all variants with negative stock  # noqa: E501

        Returns a list of variants with negative stock balance.   Each variant has a date of the latest stock movement that resulted in negative stock balance.  # noqa: E501

        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param variant_id: Filters results by a valid variant id.
        :type variant_id: int
        :param latest_negative_stock_date_max: Filters negative stock by a latest negative stock date max
        :type latest_negative_stock_date_max: str
        :param latest_negative_stock_date_min: Filters negative stock by a latest negative stock date min
        :type latest_negative_stock_date_min: str
        :param name: Filters additional costs by a name
        :type name: str
        :param sku: Filters results by a sku
        :type sku: str
        :param category: Filters negative stock by a category
        :type category: str
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NegativeStockListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "location_id",
            "variant_id",
            "latest_negative_stock_date_max",
            "latest_negative_stock_date_min",
            "name",
            "sku",
            "category",
            "limit",
            "page",
        ]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_negative_stock" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("location_id") is not None:
            _query_params.append(("location_id", _params["location_id"]))

        if _params.get("variant_id") is not None:
            _query_params.append(("variant_id", _params["variant_id"]))

        if _params.get("latest_negative_stock_date_max") is not None:
            _query_params.append(
                (
                    "latest_negative_stock_date_max",
                    _params["latest_negative_stock_date_max"],
                )
            )

        if _params.get("latest_negative_stock_date_min") is not None:
            _query_params.append(
                (
                    "latest_negative_stock_date_min",
                    _params["latest_negative_stock_date_min"],
                )
            )

        if _params.get("name") is not None:
            _query_params.append(("name", _params["name"]))

        if _params.get("sku") is not None:
            _query_params.append(("sku", _params["sku"]))

        if _params.get("category") is not None:
            _query_params.append(("category", _params["category"]))

        if _params.get("limit") is not None:
            _query_params.append(("limit", _params["limit"]))

        if _params.get("page") is not None:
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "200": "NegativeStockListResponse",
            "401": "ErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/negative_stock",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_inventory_reorder_points(
        self,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        variant_ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of variant IDs."),
        ] = None,
        location_ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of location IDs."),
        ] = None,
        **kwargs,
    ) -> InventoryReorderPointListResponse:
        """List all inventory reorder points  # noqa: E501

        Retrieves a list of inventory reorder points.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param variant_ids: Filters results by an array of variant IDs.
        :type variant_ids: List[int]
        :param location_ids: Filters results by an array of location IDs.
        :type location_ids: List[int]
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InventoryReorderPointListResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_inventory_reorder_points_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            raise ValueError(message)
        return await self.get_inventory_reorder_points_with_http_info(
            limit, page, variant_ids, location_ids, **kwargs
        )

    @validate_arguments
    async def get_inventory_reorder_points_with_http_info(
        self,
        limit: Annotated[
            StrictInt | None,
            Field(description="Number of records to return per page."),
        ] = None,
        page: Annotated[
            StrictInt | None, Field(description="Page number to return.")
        ] = None,
        variant_ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of variant IDs."),
        ] = None,
        location_ids: Annotated[
            conlist(StrictInt) | None,
            Field(description="Filters results by an array of location IDs."),
        ] = None,
        **kwargs,
    ) -> ApiResponse:
        """List all inventory reorder points  # noqa: E501

        Retrieves a list of inventory reorder points.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param variant_ids: Filters results by an array of variant IDs.
        :type variant_ids: List[int]
        :param location_ids: Filters results by an array of location IDs.
        :type location_ids: List[int]
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InventoryReorderPointListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["limit", "page", "variant_ids", "location_ids"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inventory_reorder_points" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:
            _query_params.append(("limit", _params["limit"]))

        if _params.get("page") is not None:
            _query_params.append(("page", _params["page"]))

        if _params.get("variant_ids") is not None:
            _query_params.append(("variant_ids", _params["variant_ids"]))
            _collection_formats["variant_ids"] = "multi"

        if _params.get("location_ids") is not None:
            _query_params.append(("location_ids", _params["location_ids"]))
            _collection_formats["location_ids"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )

        # authentication setting
        _auth_settings = ["bearerAuth"]

        _response_types_map = {
            "200": "InventoryReorderPointListResponse",
            "401": "ErrorResponse",
            "429": "ErrorResponse",
            "500": "ErrorResponse",
        }

        return await self.api_client.call_api(
            "/inventory_reorder_points",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
