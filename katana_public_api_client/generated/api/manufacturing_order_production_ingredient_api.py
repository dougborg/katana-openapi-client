# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401

from pydantic import validate_arguments

from typing_extensions import Annotated
from pydantic import Field, StrictInt

from katana_public_api_client.generated.models.manufacturing_order_production_ingredient_response import ManufacturingOrderProductionIngredientResponse
from katana_public_api_client.generated.models.update_manufacturing_order_production_ingredient_request import UpdateManufacturingOrderProductionIngredientRequest

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ManufacturingOrderProductionIngredientApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def update_manufacturing_order_production_ingredient(self, id : Annotated[StrictInt, Field(..., description="manufacturing order production ingredient id")], update_manufacturing_order_production_ingredient_request : Annotated[UpdateManufacturingOrderProductionIngredientRequest, Field(..., description="manufacturing order production ingredient details")], **kwargs) -> ManufacturingOrderProductionIngredientResponse:  # noqa: E501
        """Update a manufacturing order production ingredient  # noqa: E501

        Updates the specified manufacturing order production ingredient by setting the values of the parameters passed.   Any parameters not provided will be left unchanged. Manufacturing order production ingredient cannot be updated when   the manufacturing order status is DONE.  # noqa: E501

        :param id: manufacturing order production ingredient id (required)
        :type id: int
        :param update_manufacturing_order_production_ingredient_request: manufacturing order production ingredient details (required)
        :type update_manufacturing_order_production_ingredient_request: UpdateManufacturingOrderProductionIngredientRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ManufacturingOrderProductionIngredientResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_manufacturing_order_production_ingredient_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.update_manufacturing_order_production_ingredient_with_http_info(id, update_manufacturing_order_production_ingredient_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def update_manufacturing_order_production_ingredient_with_http_info(self, id : Annotated[StrictInt, Field(..., description="manufacturing order production ingredient id")], update_manufacturing_order_production_ingredient_request : Annotated[UpdateManufacturingOrderProductionIngredientRequest, Field(..., description="manufacturing order production ingredient details")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a manufacturing order production ingredient  # noqa: E501

        Updates the specified manufacturing order production ingredient by setting the values of the parameters passed.   Any parameters not provided will be left unchanged. Manufacturing order production ingredient cannot be updated when   the manufacturing order status is DONE.  # noqa: E501

        :param id: manufacturing order production ingredient id (required)
        :type id: int
        :param update_manufacturing_order_production_ingredient_request: manufacturing order production ingredient details (required)
        :type update_manufacturing_order_production_ingredient_request: UpdateManufacturingOrderProductionIngredientRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ManufacturingOrderProductionIngredientResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'update_manufacturing_order_production_ingredient_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_manufacturing_order_production_ingredient" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_manufacturing_order_production_ingredient_request'] is not None:
            _body_params = _params['update_manufacturing_order_production_ingredient_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ManufacturingOrderProductionIngredientResponse",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/manufacturing_order_production_ingredients/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
