# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401

from pydantic import validate_arguments
from typing import Optional

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr


from katana_public_api_client.generated.models.batch import Batch
from katana_public_api_client.generated.models.batch_stock import BatchStock
from katana_public_api_client.generated.models.batch_stock_list_response import BatchStockListResponse
from katana_public_api_client.generated.models.batch_stock_update import BatchStockUpdate

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BatchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_batch(self, batch : Annotated[Batch, Field(..., description="New batch values")], **kwargs) -> Batch:  # noqa: E501
        """Create a batch  # noqa: E501

        Creates a batch object.  # noqa: E501

        :param batch: New batch values (required)
        :type batch: Batch
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Batch
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_batch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_batch_with_http_info(batch, **kwargs)  # noqa: E501

    @validate_arguments
    async def create_batch_with_http_info(self, batch : Annotated[Batch, Field(..., description="New batch values")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a batch  # noqa: E501

        Creates a batch object.  # noqa: E501

        :param batch: New batch values (required)
        :type batch: Batch
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Batch, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'batch'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_batch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['batch'] is not None:
            _body_params = _params['batch']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Batch",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/batches', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def get_batch_stock(self, batch_id : Annotated[Optional[StrictInt], Field(description="Filters results by a valid batch id.")] = None, batch_number : Annotated[Optional[StrictStr], Field(description="Filters results by a valid batch number.")] = None, location_id : Annotated[Optional[StrictInt], Field(description="Filters results by a location ID.")] = None, variant_id : Annotated[Optional[StrictInt], Field(description="Filters results by a valid variant id.")] = None, batch_barcode : Annotated[Optional[StrictStr], Field(description="Filter results by batch barcode.")] = None, batch_created_at_min : Annotated[Optional[StrictStr], Field(description="Minimum value for batch_created_at range (ISO 8601).")] = None, batch_created_at_max : Annotated[Optional[StrictStr], Field(description="Maximum value for batch_created_at range (ISO 8601).")] = None, include_empty : Annotated[Optional[StrictBool], Field(description="Include empty result objects.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, **kwargs) -> BatchStockListResponse:  # noqa: E501
        """List current batch stock  # noqa: E501

        Returns a list for current batch stock. The inventory is returned in sorted order, based on location_id ASC, variant_id ASC, and batch_id DESC.   # noqa: E501

        :param batch_id: Filters results by a valid batch id.
        :type batch_id: int
        :param batch_number: Filters results by a valid batch number.
        :type batch_number: str
        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param variant_id: Filters results by a valid variant id.
        :type variant_id: int
        :param batch_barcode: Filter results by batch barcode.
        :type batch_barcode: str
        :param batch_created_at_min: Minimum value for batch_created_at range (ISO 8601).
        :type batch_created_at_min: str
        :param batch_created_at_max: Maximum value for batch_created_at range (ISO 8601).
        :type batch_created_at_max: str
        :param include_empty: Include empty result objects.
        :type include_empty: bool
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchStockListResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_batch_stock_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_batch_stock_with_http_info(batch_id, batch_number, location_id, variant_id, batch_barcode, batch_created_at_min, batch_created_at_max, include_empty, limit, page, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_batch_stock_with_http_info(self, batch_id : Annotated[Optional[StrictInt], Field(description="Filters results by a valid batch id.")] = None, batch_number : Annotated[Optional[StrictStr], Field(description="Filters results by a valid batch number.")] = None, location_id : Annotated[Optional[StrictInt], Field(description="Filters results by a location ID.")] = None, variant_id : Annotated[Optional[StrictInt], Field(description="Filters results by a valid variant id.")] = None, batch_barcode : Annotated[Optional[StrictStr], Field(description="Filter results by batch barcode.")] = None, batch_created_at_min : Annotated[Optional[StrictStr], Field(description="Minimum value for batch_created_at range (ISO 8601).")] = None, batch_created_at_max : Annotated[Optional[StrictStr], Field(description="Maximum value for batch_created_at range (ISO 8601).")] = None, include_empty : Annotated[Optional[StrictBool], Field(description="Include empty result objects.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List current batch stock  # noqa: E501

        Returns a list for current batch stock. The inventory is returned in sorted order, based on location_id ASC, variant_id ASC, and batch_id DESC.   # noqa: E501

        :param batch_id: Filters results by a valid batch id.
        :type batch_id: int
        :param batch_number: Filters results by a valid batch number.
        :type batch_number: str
        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param variant_id: Filters results by a valid variant id.
        :type variant_id: int
        :param batch_barcode: Filter results by batch barcode.
        :type batch_barcode: str
        :param batch_created_at_min: Minimum value for batch_created_at range (ISO 8601).
        :type batch_created_at_min: str
        :param batch_created_at_max: Maximum value for batch_created_at range (ISO 8601).
        :type batch_created_at_max: str
        :param include_empty: Include empty result objects.
        :type include_empty: bool
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchStockListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'batch_id',
            'batch_number',
            'location_id',
            'variant_id',
            'batch_barcode',
            'batch_created_at_min',
            'batch_created_at_max',
            'include_empty',
            'limit',
            'page'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_batch_stock" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('batch_id') is not None:  # noqa: E501
            _query_params.append(('batch_id', _params['batch_id']))

        if _params.get('batch_number') is not None:  # noqa: E501
            _query_params.append(('batch_number', _params['batch_number']))

        if _params.get('location_id') is not None:  # noqa: E501
            _query_params.append(('location_id', _params['location_id']))

        if _params.get('variant_id') is not None:  # noqa: E501
            _query_params.append(('variant_id', _params['variant_id']))

        if _params.get('batch_barcode') is not None:  # noqa: E501
            _query_params.append(('batch_barcode', _params['batch_barcode']))

        if _params.get('batch_created_at_min') is not None:  # noqa: E501
            _query_params.append(('batch_created_at_min', _params['batch_created_at_min']))

        if _params.get('batch_created_at_max') is not None:  # noqa: E501
            _query_params.append(('batch_created_at_max', _params['batch_created_at_max']))

        if _params.get('include_empty') is not None:  # noqa: E501
            _query_params.append(('include_empty', _params['include_empty']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "BatchStockListResponse",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/batch_stocks', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def update_batch_stock(self, batch_id : StrictInt, batch_stock_update : Annotated[BatchStockUpdate, Field(..., description="Batch stock fields to be updated with new values")], location_id : Annotated[Optional[StrictInt], Field(description="Filters results by a location ID.")] = None, **kwargs) -> BatchStock:  # noqa: E501
        """Update batch details  # noqa: E501

        Updates the specified batch details by setting the values of the parameters passed. Any parameters not provided will be left unchanged.   # noqa: E501

        :param batch_id: (required)
        :type batch_id: int
        :param batch_stock_update: Batch stock fields to be updated with new values (required)
        :type batch_stock_update: BatchStockUpdate
        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BatchStock
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_batch_stock_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.update_batch_stock_with_http_info(batch_id, batch_stock_update, location_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def update_batch_stock_with_http_info(self, batch_id : StrictInt, batch_stock_update : Annotated[BatchStockUpdate, Field(..., description="Batch stock fields to be updated with new values")], location_id : Annotated[Optional[StrictInt], Field(description="Filters results by a location ID.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update batch details  # noqa: E501

        Updates the specified batch details by setting the values of the parameters passed. Any parameters not provided will be left unchanged.   # noqa: E501

        :param batch_id: (required)
        :type batch_id: int
        :param batch_stock_update: Batch stock fields to be updated with new values (required)
        :type batch_stock_update: BatchStockUpdate
        :param location_id: Filters results by a location ID.
        :type location_id: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BatchStock, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'batch_id',
            'batch_stock_update',
            'location_id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_batch_stock" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['batch_id'] is not None:
            _path_params['batch_id'] = _params['batch_id']


        # process the query parameters
        _query_params = []
        if _params.get('location_id') is not None:  # noqa: E501
            _query_params.append(('location_id', _params['location_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['batch_stock_update'] is not None:
            _body_params = _params['batch_stock_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "BatchStock",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/batch_stocks/{batch_id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
