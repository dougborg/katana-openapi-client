# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401

from pydantic import validate_arguments
from typing import Optional, Union

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, constr


from katana_public_api_client.generated.models.create_variant_request import CreateVariantRequest
from katana_public_api_client.generated.models.update_variant_request import UpdateVariantRequest
from katana_public_api_client.generated.models.variant import Variant
from katana_public_api_client.generated.models.variant_list_response import VariantListResponse
from katana_public_api_client.generated.models.variant_response import VariantResponse

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VariantApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_variant(self, create_variant_request : Annotated[CreateVariantRequest, Field(..., description="new variant details")], **kwargs) -> Variant:  # noqa: E501
        """Create a variant  # noqa: E501

        Creates a new variant object. Note that you can create variants for both products and materials.     In order for Katana to know which one you are creating,     you have to specify either product_id or material_id, not both.  # noqa: E501

        :param create_variant_request: new variant details (required)
        :type create_variant_request: CreateVariantRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Variant
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_variant_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_variant_with_http_info(create_variant_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def create_variant_with_http_info(self, create_variant_request : Annotated[CreateVariantRequest, Field(..., description="new variant details")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a variant  # noqa: E501

        Creates a new variant object. Note that you can create variants for both products and materials.     In order for Katana to know which one you are creating,     you have to specify either product_id or material_id, not both.  # noqa: E501

        :param create_variant_request: new variant details (required)
        :type create_variant_request: CreateVariantRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Variant, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_variant_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_variant" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_variant_request'] is not None:
            _body_params = _params['create_variant_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Variant",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/variants', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def delete_variant(self, id : Annotated[StrictInt, Field(..., description="Variant id")], **kwargs) -> None:  # noqa: E501
        """Delete a variant  # noqa: E501

        Deletes a variant by id.  # noqa: E501

        :param id: Variant id (required)
        :type id: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_variant_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.delete_variant_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    async def delete_variant_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Variant id")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a variant  # noqa: E501

        Deletes a variant by id.  # noqa: E501

        :param id: Variant id (required)
        :type id: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_variant" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            '/variants/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def get_all_variants(self, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, product_id : Annotated[Optional[StrictInt], Field(description="Filters variants by a product id")] = None, material_id : Annotated[Optional[StrictInt], Field(description="Filters variants by a material id")] = None, sku : Annotated[Optional[conlist(StrictStr)], Field(description="Filters results by list of skus")] = None, sales_price : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters variants by a sales price")] = None, purchase_price : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters variants by a purchase price")] = None, internal_barcode : Annotated[Optional[constr(strict=True, max_length=40, min_length=3)], Field(description="Filters variants by an internal barcode")] = None, registered_barcode : Annotated[Optional[constr(strict=True, max_length=120)], Field(description="Filters variants by a registered barcode")] = None, supplier_item_codes : Annotated[Optional[conlist(constr(strict=True, min_length=1))], Field(description="Filters variants by supplier item codes. Returns the variants that match with any of the codes in the array.")] = None, extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, include_archived : Annotated[Optional[StrictBool], Field(description="Includes archived results.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, created_at_min : Annotated[Optional[datetime], Field(description="Minimum creation date (ISO 8601 format).")] = None, created_at_max : Annotated[Optional[datetime], Field(description="Maximum creation date (ISO 8601 format).")] = None, updated_at_min : Annotated[Optional[datetime], Field(description="Minimum update date (ISO 8601 format).")] = None, updated_at_max : Annotated[Optional[datetime], Field(description="Maximum update date (ISO 8601 format).")] = None, **kwargs) -> VariantListResponse:  # noqa: E501
        """List all variants  # noqa: E501

        Returns a list of variants you've previously created. The variants are returned in sorted order,     with the most recent variants appearing first.  # noqa: E501

        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param product_id: Filters variants by a product id
        :type product_id: int
        :param material_id: Filters variants by a material id
        :type material_id: int
        :param sku: Filters results by list of skus
        :type sku: List[str]
        :param sales_price: Filters variants by a sales price
        :type sales_price: float
        :param purchase_price: Filters variants by a purchase price
        :type purchase_price: float
        :param internal_barcode: Filters variants by an internal barcode
        :type internal_barcode: str
        :param registered_barcode: Filters variants by a registered barcode
        :type registered_barcode: str
        :param supplier_item_codes: Filters variants by supplier item codes. Returns the variants that match with any of the codes in the array.
        :type supplier_item_codes: List[str]
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param include_archived: Includes archived results.
        :type include_archived: bool
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param created_at_min: Minimum creation date (ISO 8601 format).
        :type created_at_min: datetime
        :param created_at_max: Maximum creation date (ISO 8601 format).
        :type created_at_max: datetime
        :param updated_at_min: Minimum update date (ISO 8601 format).
        :type updated_at_min: datetime
        :param updated_at_max: Maximum update date (ISO 8601 format).
        :type updated_at_max: datetime
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VariantListResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_variants_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_all_variants_with_http_info(ids, product_id, material_id, sku, sales_price, purchase_price, internal_barcode, registered_barcode, supplier_item_codes, extend, include_deleted, include_archived, limit, page, created_at_min, created_at_max, updated_at_min, updated_at_max, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_all_variants_with_http_info(self, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, product_id : Annotated[Optional[StrictInt], Field(description="Filters variants by a product id")] = None, material_id : Annotated[Optional[StrictInt], Field(description="Filters variants by a material id")] = None, sku : Annotated[Optional[conlist(StrictStr)], Field(description="Filters results by list of skus")] = None, sales_price : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters variants by a sales price")] = None, purchase_price : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Filters variants by a purchase price")] = None, internal_barcode : Annotated[Optional[constr(strict=True, max_length=40, min_length=3)], Field(description="Filters variants by an internal barcode")] = None, registered_barcode : Annotated[Optional[constr(strict=True, max_length=120)], Field(description="Filters variants by a registered barcode")] = None, supplier_item_codes : Annotated[Optional[conlist(constr(strict=True, min_length=1))], Field(description="Filters variants by supplier item codes. Returns the variants that match with any of the codes in the array.")] = None, extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, include_archived : Annotated[Optional[StrictBool], Field(description="Includes archived results.")] = None, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, created_at_min : Annotated[Optional[datetime], Field(description="Minimum creation date (ISO 8601 format).")] = None, created_at_max : Annotated[Optional[datetime], Field(description="Maximum creation date (ISO 8601 format).")] = None, updated_at_min : Annotated[Optional[datetime], Field(description="Minimum update date (ISO 8601 format).")] = None, updated_at_max : Annotated[Optional[datetime], Field(description="Maximum update date (ISO 8601 format).")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all variants  # noqa: E501

        Returns a list of variants you've previously created. The variants are returned in sorted order,     with the most recent variants appearing first.  # noqa: E501

        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param product_id: Filters variants by a product id
        :type product_id: int
        :param material_id: Filters variants by a material id
        :type material_id: int
        :param sku: Filters results by list of skus
        :type sku: List[str]
        :param sales_price: Filters variants by a sales price
        :type sales_price: float
        :param purchase_price: Filters variants by a purchase price
        :type purchase_price: float
        :param internal_barcode: Filters variants by an internal barcode
        :type internal_barcode: str
        :param registered_barcode: Filters variants by a registered barcode
        :type registered_barcode: str
        :param supplier_item_codes: Filters variants by supplier item codes. Returns the variants that match with any of the codes in the array.
        :type supplier_item_codes: List[str]
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param include_archived: Includes archived results.
        :type include_archived: bool
        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param created_at_min: Minimum creation date (ISO 8601 format).
        :type created_at_min: datetime
        :param created_at_max: Maximum creation date (ISO 8601 format).
        :type created_at_max: datetime
        :param updated_at_min: Minimum update date (ISO 8601 format).
        :type updated_at_min: datetime
        :param updated_at_max: Maximum update date (ISO 8601 format).
        :type updated_at_max: datetime
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VariantListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ids',
            'product_id',
            'material_id',
            'sku',
            'sales_price',
            'purchase_price',
            'internal_barcode',
            'registered_barcode',
            'supplier_item_codes',
            'extend',
            'include_deleted',
            'include_archived',
            'limit',
            'page',
            'created_at_min',
            'created_at_max',
            'updated_at_min',
            'updated_at_max'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_variants" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))
            _collection_formats['ids'] = 'multi'

        if _params.get('product_id') is not None:  # noqa: E501
            _query_params.append(('product_id', _params['product_id']))

        if _params.get('material_id') is not None:  # noqa: E501
            _query_params.append(('material_id', _params['material_id']))

        if _params.get('sku') is not None:  # noqa: E501
            _query_params.append(('sku', _params['sku']))
            _collection_formats['sku'] = 'multi'

        if _params.get('sales_price') is not None:  # noqa: E501
            _query_params.append(('sales_price', _params['sales_price']))

        if _params.get('purchase_price') is not None:  # noqa: E501
            _query_params.append(('purchase_price', _params['purchase_price']))

        if _params.get('internal_barcode') is not None:  # noqa: E501
            _query_params.append(('internal_barcode', _params['internal_barcode']))

        if _params.get('registered_barcode') is not None:  # noqa: E501
            _query_params.append(('registered_barcode', _params['registered_barcode']))

        if _params.get('supplier_item_codes') is not None:  # noqa: E501
            _query_params.append(('supplier_item_codes', _params['supplier_item_codes']))
            _collection_formats['supplier_item_codes'] = 'multi'

        if _params.get('extend') is not None:  # noqa: E501
            _query_params.append(('extend', _params['extend']))
            _collection_formats['extend'] = 'multi'

        if _params.get('include_deleted') is not None:  # noqa: E501
            _query_params.append(('include_deleted', _params['include_deleted']))

        if _params.get('include_archived') is not None:  # noqa: E501
            _query_params.append(('include_archived', _params['include_archived']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('created_at_min') is not None:  # noqa: E501
            if isinstance(_params['created_at_min'], datetime):
                _query_params.append(('created_at_min', _params['created_at_min'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_min', _params['created_at_min']))

        if _params.get('created_at_max') is not None:  # noqa: E501
            if isinstance(_params['created_at_max'], datetime):
                _query_params.append(('created_at_max', _params['created_at_max'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_max', _params['created_at_max']))

        if _params.get('updated_at_min') is not None:  # noqa: E501
            if isinstance(_params['updated_at_min'], datetime):
                _query_params.append(('updated_at_min', _params['updated_at_min'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_at_min', _params['updated_at_min']))

        if _params.get('updated_at_max') is not None:  # noqa: E501
            if isinstance(_params['updated_at_max'], datetime):
                _query_params.append(('updated_at_max', _params['updated_at_max'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_at_max', _params['updated_at_max']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "VariantListResponse",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/variants', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def get_variant(self, id : Annotated[StrictInt, Field(..., description="Variant id")], extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, **kwargs) -> VariantResponse:  # noqa: E501
        """Retrieve a variant  # noqa: E501

        Retrieves the details of an existing variant based on ID.  # noqa: E501

        :param id: Variant id (required)
        :type id: int
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VariantResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_variant_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_variant_with_http_info(id, extend, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_variant_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Variant id")], extend : Annotated[Optional[conlist(StrictStr)], Field(description="Array of objects to extend the response.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a variant  # noqa: E501

        Retrieves the details of an existing variant based on ID.  # noqa: E501

        :param id: Variant id (required)
        :type id: int
        :param extend: Array of objects to extend the response.
        :type extend: List[str]
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VariantResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'extend'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_variant" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('extend') is not None:  # noqa: E501
            _query_params.append(('extend', _params['extend']))
            _collection_formats['extend'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "VariantResponse",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/variants/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    async def update_variant(self, id : Annotated[StrictInt, Field(..., description="Variant id")], update_variant_request : Annotated[UpdateVariantRequest, Field(..., description="Variant details")], **kwargs) -> Variant:  # noqa: E501
        """Update a variant  # noqa: E501

        Updates the specified variant by setting the values of the parameters passed.     Any parameters not provided will be left unchanged.  # noqa: E501

        :param id: Variant id (required)
        :type id: int
        :param update_variant_request: Variant details (required)
        :type update_variant_request: UpdateVariantRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Variant
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_variant_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.update_variant_with_http_info(id, update_variant_request, **kwargs)  # noqa: E501

    @validate_arguments
    async def update_variant_with_http_info(self, id : Annotated[StrictInt, Field(..., description="Variant id")], update_variant_request : Annotated[UpdateVariantRequest, Field(..., description="Variant details")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a variant  # noqa: E501

        Updates the specified variant by setting the values of the parameters passed.     Any parameters not provided will be left unchanged.  # noqa: E501

        :param id: Variant id (required)
        :type id: int
        :param update_variant_request: Variant details (required)
        :type update_variant_request: UpdateVariantRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Variant, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'update_variant_request'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_variant" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id'] is not None:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_variant_request'] is not None:
            _body_params = _params['update_variant_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Variant",
            '401': "ErrorResponse",
            '422': "DetailedErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/variants/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
