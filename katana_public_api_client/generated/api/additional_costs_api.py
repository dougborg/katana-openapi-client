# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401

from pydantic import validate_arguments
from typing import Optional

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist


from katana_public_api_client.generated.models.additional_cost_list_response import AdditionalCostListResponse

from katana_public_api_client.generated.api_client import ApiClient
from katana_public_api_client.generated.api_response import ApiResponse
from katana_public_api_client.generated.errors import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AdditionalCostsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def get_additional_costs(self, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, created_at_min : Annotated[Optional[datetime], Field(description="Minimum creation date (ISO 8601 format).")] = None, created_at_max : Annotated[Optional[datetime], Field(description="Maximum creation date (ISO 8601 format).")] = None, updated_at_min : Annotated[Optional[datetime], Field(description="Minimum update date (ISO 8601 format).")] = None, updated_at_max : Annotated[Optional[datetime], Field(description="Maximum update date (ISO 8601 format).")] = None, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, name : Annotated[Optional[StrictStr], Field(description="Filters additional costs by a name")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, **kwargs) -> AdditionalCostListResponse:  # noqa: E501
        """List all additional costs  # noqa: E501

        Returns a list of additional costs you've previously created.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param created_at_min: Minimum creation date (ISO 8601 format).
        :type created_at_min: datetime
        :param created_at_max: Maximum creation date (ISO 8601 format).
        :type created_at_max: datetime
        :param updated_at_min: Minimum update date (ISO 8601 format).
        :type updated_at_min: datetime
        :param updated_at_max: Maximum update date (ISO 8601 format).
        :type updated_at_max: datetime
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param name: Filters additional costs by a name
        :type name: str
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AdditionalCostListResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_additional_costs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_additional_costs_with_http_info(limit, page, created_at_min, created_at_max, updated_at_min, updated_at_max, ids, name, include_deleted, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_additional_costs_with_http_info(self, limit : Annotated[Optional[StrictInt], Field(description="Number of records to return per page.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number to return.")] = None, created_at_min : Annotated[Optional[datetime], Field(description="Minimum creation date (ISO 8601 format).")] = None, created_at_max : Annotated[Optional[datetime], Field(description="Maximum creation date (ISO 8601 format).")] = None, updated_at_min : Annotated[Optional[datetime], Field(description="Minimum update date (ISO 8601 format).")] = None, updated_at_max : Annotated[Optional[datetime], Field(description="Maximum update date (ISO 8601 format).")] = None, ids : Annotated[Optional[conlist(StrictInt)], Field(description="Filters results by an array of IDs.")] = None, name : Annotated[Optional[StrictStr], Field(description="Filters additional costs by a name")] = None, include_deleted : Annotated[Optional[StrictBool], Field(description="Include soft-deleted items.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all additional costs  # noqa: E501

        Returns a list of additional costs you've previously created.  # noqa: E501

        :param limit: Number of records to return per page.
        :type limit: int
        :param page: Page number to return.
        :type page: int
        :param created_at_min: Minimum creation date (ISO 8601 format).
        :type created_at_min: datetime
        :param created_at_max: Maximum creation date (ISO 8601 format).
        :type created_at_max: datetime
        :param updated_at_min: Minimum update date (ISO 8601 format).
        :type updated_at_min: datetime
        :param updated_at_max: Maximum update date (ISO 8601 format).
        :type updated_at_max: datetime
        :param ids: Filters results by an array of IDs.
        :type ids: List[int]
        :param name: Filters additional costs by a name
        :type name: str
        :param include_deleted: Include soft-deleted items.
        :type include_deleted: bool
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AdditionalCostListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'limit',
            'page',
            'created_at_min',
            'created_at_max',
            'updated_at_min',
            'updated_at_max',
            'ids',
            'name',
            'include_deleted'
        ]
        _all_params.extend(
            [
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_additional_costs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('created_at_min') is not None:  # noqa: E501
            if isinstance(_params['created_at_min'], datetime):
                _query_params.append(('created_at_min', _params['created_at_min'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_min', _params['created_at_min']))

        if _params.get('created_at_max') is not None:  # noqa: E501
            if isinstance(_params['created_at_max'], datetime):
                _query_params.append(('created_at_max', _params['created_at_max'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_max', _params['created_at_max']))

        if _params.get('updated_at_min') is not None:  # noqa: E501
            if isinstance(_params['updated_at_min'], datetime):
                _query_params.append(('updated_at_min', _params['updated_at_min'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_at_min', _params['updated_at_min']))

        if _params.get('updated_at_max') is not None:  # noqa: E501
            if isinstance(_params['updated_at_max'], datetime):
                _query_params.append(('updated_at_max', _params['updated_at_max'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updated_at_max', _params['updated_at_max']))

        if _params.get('ids') is not None:  # noqa: E501
            _query_params.append(('ids', _params['ids']))
            _collection_formats['ids'] = 'multi'

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('include_deleted') is not None:  # noqa: E501
            _query_params.append(('include_deleted', _params['include_deleted']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "AdditionalCostListResponse",
            '401': "ErrorResponse",
            '429': "ErrorResponse",
            '500': "ErrorResponse",
        }

        return await self.api_client.call_api(
            '/additional_costs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
