# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from katana_public_api_client.generated.models.create_sales_order_request_sales_order_rows_inner import CreateSalesOrderRequestSalesOrderRowsInner
from katana_public_api_client.generated.models.sales_order_address import SalesOrderAddress

class CreateSalesOrderRequest(BaseModel):
    """
    CreateSalesOrderRequest
    """
    order_no: StrictStr = Field(...)
    customer_id: StrictInt = Field(...)
    sales_order_rows: conlist(CreateSalesOrderRequestSalesOrderRowsInner) = Field(...)
    tracking_number: Optional[StrictStr] = None
    tracking_number_url: Optional[StrictStr] = None
    addresses: Optional[conlist(SalesOrderAddress)] = None
    order_created_date: Optional[StrictStr] = None
    delivery_date: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    location_id: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    additional_info: Optional[StrictStr] = None
    customer_ref: Optional[StrictStr] = None
    ecommerce_order_type: Optional[StrictStr] = None
    ecommerce_store_name: Optional[StrictStr] = None
    ecommerce_order_id: Optional[StrictStr] = None
    __properties = ["order_no", "customer_id", "sales_order_rows", "tracking_number", "tracking_number_url", "addresses", "order_created_date", "delivery_date", "currency", "location_id", "status", "additional_info", "customer_ref", "ecommerce_order_type", "ecommerce_store_name", "ecommerce_order_id"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NOT_SHIPPED', 'PENDING',):
            raise ValueError("must be one of enum values ('NOT_SHIPPED', 'PENDING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSalesOrderRequest:
        """Create an instance of CreateSalesOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sales_order_rows (list)
        _items = []
        if self.sales_order_rows:
            for _item in self.sales_order_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sales_order_rows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        # set to None if tracking_number (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_number is None and "tracking_number" in self.__fields_set__:
            _dict['tracking_number'] = None

        # set to None if tracking_number_url (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_number_url is None and "tracking_number_url" in self.__fields_set__:
            _dict['tracking_number_url'] = None

        # set to None if order_created_date (nullable) is None
        # and __fields_set__ contains the field
        if self.order_created_date is None and "order_created_date" in self.__fields_set__:
            _dict['order_created_date'] = None

        # set to None if delivery_date (nullable) is None
        # and __fields_set__ contains the field
        if self.delivery_date is None and "delivery_date" in self.__fields_set__:
            _dict['delivery_date'] = None

        # set to None if currency (nullable) is None
        # and __fields_set__ contains the field
        if self.currency is None and "currency" in self.__fields_set__:
            _dict['currency'] = None

        # set to None if additional_info (nullable) is None
        # and __fields_set__ contains the field
        if self.additional_info is None and "additional_info" in self.__fields_set__:
            _dict['additional_info'] = None

        # set to None if customer_ref (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_ref is None and "customer_ref" in self.__fields_set__:
            _dict['customer_ref'] = None

        # set to None if ecommerce_order_type (nullable) is None
        # and __fields_set__ contains the field
        if self.ecommerce_order_type is None and "ecommerce_order_type" in self.__fields_set__:
            _dict['ecommerce_order_type'] = None

        # set to None if ecommerce_store_name (nullable) is None
        # and __fields_set__ contains the field
        if self.ecommerce_store_name is None and "ecommerce_store_name" in self.__fields_set__:
            _dict['ecommerce_store_name'] = None

        # set to None if ecommerce_order_id (nullable) is None
        # and __fields_set__ contains the field
        if self.ecommerce_order_id is None and "ecommerce_order_id" in self.__fields_set__:
            _dict['ecommerce_order_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSalesOrderRequest:
        """Create an instance of CreateSalesOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSalesOrderRequest.parse_obj(obj)

        _obj = CreateSalesOrderRequest.parse_obj({
            "order_no": obj.get("order_no"),
            "customer_id": obj.get("customer_id"),
            "sales_order_rows": [CreateSalesOrderRequestSalesOrderRowsInner.from_dict(_item) for _item in obj.get("sales_order_rows")] if obj.get("sales_order_rows") is not None else None,
            "tracking_number": obj.get("tracking_number"),
            "tracking_number_url": obj.get("tracking_number_url"),
            "addresses": [SalesOrderAddress.from_dict(_item) for _item in obj.get("addresses")] if obj.get("addresses") is not None else None,
            "order_created_date": obj.get("order_created_date"),
            "delivery_date": obj.get("delivery_date"),
            "currency": obj.get("currency"),
            "location_id": obj.get("location_id"),
            "status": obj.get("status"),
            "additional_info": obj.get("additional_info"),
            "customer_ref": obj.get("customer_ref"),
            "ecommerce_order_type": obj.get("ecommerce_order_type"),
            "ecommerce_store_name": obj.get("ecommerce_store_name"),
            "ecommerce_order_id": obj.get("ecommerce_order_id")
        })
        return _obj


