"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class SalesOrderAddress(BaseModel):
    """
    SalesOrderAddress
    """

    created_at: datetime | None = None
    updated_at: datetime | None = None
    id: StrictInt = Field(...)
    sales_order_id: StrictInt = Field(...)
    entity_type: StrictStr = Field(...)
    first_name: StrictStr | None = None
    last_name: StrictStr | None = None
    company: StrictStr | None = None
    phone: StrictStr | None = None
    line_1: StrictStr | None = None
    line_2: StrictStr | None = None
    city: StrictStr | None = None
    state: StrictStr | None = None
    zip: StrictStr | None = None
    country: StrictStr | None = None
    __properties = [
        "created_at",
        "updated_at",
        "id",
        "sales_order_id",
        "entity_type",
        "first_name",
        "last_name",
        "company",
        "phone",
        "line_1",
        "line_2",
        "city",
        "state",
        "zip",
        "country",
    ]

    @validator("entity_type")
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "billing",
            "shipping",
        ):
            raise ValueError("must be one of enum values ('billing', 'shipping')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SalesOrderAddress:
        """Create an instance of SalesOrderAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if first_name (nullable) is None
        # and __fields_set__ contains the field
        if self.first_name is None and "first_name" in self.__fields_set__:
            _dict["first_name"] = None

        # set to None if last_name (nullable) is None
        # and __fields_set__ contains the field
        if self.last_name is None and "last_name" in self.__fields_set__:
            _dict["last_name"] = None

        # set to None if company (nullable) is None
        # and __fields_set__ contains the field
        if self.company is None and "company" in self.__fields_set__:
            _dict["company"] = None

        # set to None if phone (nullable) is None
        # and __fields_set__ contains the field
        if self.phone is None and "phone" in self.__fields_set__:
            _dict["phone"] = None

        # set to None if line_1 (nullable) is None
        # and __fields_set__ contains the field
        if self.line_1 is None and "line_1" in self.__fields_set__:
            _dict["line_1"] = None

        # set to None if line_2 (nullable) is None
        # and __fields_set__ contains the field
        if self.line_2 is None and "line_2" in self.__fields_set__:
            _dict["line_2"] = None

        # set to None if city (nullable) is None
        # and __fields_set__ contains the field
        if self.city is None and "city" in self.__fields_set__:
            _dict["city"] = None

        # set to None if state (nullable) is None
        # and __fields_set__ contains the field
        if self.state is None and "state" in self.__fields_set__:
            _dict["state"] = None

        # set to None if zip (nullable) is None
        # and __fields_set__ contains the field
        if self.zip is None and "zip" in self.__fields_set__:
            _dict["zip"] = None

        # set to None if country (nullable) is None
        # and __fields_set__ contains the field
        if self.country is None and "country" in self.__fields_set__:
            _dict["country"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SalesOrderAddress:
        """Create an instance of SalesOrderAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SalesOrderAddress.parse_obj(obj)

        _obj = SalesOrderAddress.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "sales_order_id": obj.get("sales_order_id"),
                "entity_type": obj.get("entity_type"),
                "first_name": obj.get("first_name"),
                "last_name": obj.get("last_name"),
                "company": obj.get("company"),
                "phone": obj.get("phone"),
                "line_1": obj.get("line_1"),
                "line_2": obj.get("line_2"),
                "city": obj.get("city"),
                "state": obj.get("state"),
                "zip": obj.get("zip"),
                "country": obj.get("country"),
            }
        )
        return _obj
