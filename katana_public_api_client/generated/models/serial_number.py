"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import BaseModel, StrictInt, StrictStr, validator


class SerialNumber(BaseModel):
    """
    SerialNumber
    """

    id: StrictInt | None = None
    transaction_id: StrictStr | None = None
    serial_number: StrictStr | None = None
    resource_type: StrictStr | None = None
    resource_id: StrictInt | None = None
    transaction_date: datetime | None = None
    __properties = [
        "id",
        "transaction_id",
        "serial_number",
        "resource_type",
        "resource_id",
        "transaction_date",
    ]

    @validator("resource_type")
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "ManufacturingOrder",
            "Production",
            "StockAdjustmentRow",
            "StockTransferRow",
            "PurchaseOrderRow",
            "SalesOrderRow",
        ):
            raise ValueError(
                "must be one of enum values ('ManufacturingOrder', 'Production', 'StockAdjustmentRow', 'StockTransferRow', 'PurchaseOrderRow', 'SalesOrderRow')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SerialNumber:
        """Create an instance of SerialNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SerialNumber:
        """Create an instance of SerialNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SerialNumber.parse_obj(obj)

        _obj = SerialNumber.parse_obj(
            {
                "id": obj.get("id"),
                "transaction_id": obj.get("transaction_id"),
                "serial_number": obj.get("serial_number"),
                "resource_type": obj.get("resource_type"),
                "resource_id": obj.get("resource_id"),
                "transaction_date": obj.get("transaction_date"),
            }
        )
        return _obj
