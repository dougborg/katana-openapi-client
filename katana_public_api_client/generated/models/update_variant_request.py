# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictStr, confloat, conint, conlist, constr
from katana_public_api_client.generated.models.variant_all_of_config_attributes import (
    VariantAllOfConfigAttributes,
)
from katana_public_api_client.generated.models.variant_all_of_custom_fields import (
    VariantAllOfCustomFields,
)


class UpdateVariantRequest(BaseModel):
    """
    UpdateVariantRequest
    """

    sku: Optional[StrictStr] = None
    sales_price: Optional[
        Union[
            confloat(le=100000000000, ge=0, strict=True),
            conint(le=2147483647, ge=0, strict=True),
        ]
    ] = None
    purchase_price: Optional[
        Union[
            confloat(le=100000000000, ge=0, strict=True),
            conint(le=2147483647, ge=0, strict=True),
        ]
    ] = None
    product_id: Optional[conint(strict=True, le=2147483647)] = None
    material_id: Optional[conint(strict=True, le=2147483647)] = None
    supplier_item_codes: Optional[conlist(StrictStr)] = None
    internal_barcode: Optional[constr(strict=True, max_length=40, min_length=3)] = None
    registered_barcode: Optional[constr(strict=True, max_length=120)] = None
    lead_time: Optional[conint(strict=True, le=999)] = None
    minimum_order_quantity: Optional[
        Union[
            confloat(le=999999999, ge=0, strict=True),
            conint(le=999999999, ge=0, strict=True),
        ]
    ] = None
    config_attributes: Optional[conlist(VariantAllOfConfigAttributes)] = None
    custom_fields: Optional[conlist(VariantAllOfCustomFields)] = None
    __properties = [
        "sku",
        "sales_price",
        "purchase_price",
        "product_id",
        "material_id",
        "supplier_item_codes",
        "internal_barcode",
        "registered_barcode",
        "lead_time",
        "minimum_order_quantity",
        "config_attributes",
        "custom_fields",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateVariantRequest:
        """Create an instance of UpdateVariantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in config_attributes (list)
        _items = []
        if self.config_attributes:
            for _item in self.config_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["config_attributes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict["custom_fields"] = _items
        # set to None if product_id (nullable) is None
        # and __fields_set__ contains the field
        if self.product_id is None and "product_id" in self.__fields_set__:
            _dict["product_id"] = None

        # set to None if material_id (nullable) is None
        # and __fields_set__ contains the field
        if self.material_id is None and "material_id" in self.__fields_set__:
            _dict["material_id"] = None

        # set to None if lead_time (nullable) is None
        # and __fields_set__ contains the field
        if self.lead_time is None and "lead_time" in self.__fields_set__:
            _dict["lead_time"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateVariantRequest:
        """Create an instance of UpdateVariantRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateVariantRequest.parse_obj(obj)

        _obj = UpdateVariantRequest.parse_obj(
            {
                "sku": obj.get("sku"),
                "sales_price": obj.get("sales_price"),
                "purchase_price": obj.get("purchase_price"),
                "product_id": obj.get("product_id"),
                "material_id": obj.get("material_id"),
                "supplier_item_codes": obj.get("supplier_item_codes"),
                "internal_barcode": obj.get("internal_barcode"),
                "registered_barcode": obj.get("registered_barcode"),
                "lead_time": obj.get("lead_time"),
                "minimum_order_quantity": obj.get("minimum_order_quantity"),
                "config_attributes": [
                    VariantAllOfConfigAttributes.from_dict(_item)
                    for _item in obj.get("config_attributes")
                ]
                if obj.get("config_attributes") is not None
                else None,
                "custom_fields": [
                    VariantAllOfCustomFields.from_dict(_item)
                    for _item in obj.get("custom_fields")
                ]
                if obj.get("custom_fields") is not None
                else None,
            }
        )
        return _obj
