# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, constr

class CreatePurchaseOrderRowRequest(BaseModel):
    """
    CreatePurchaseOrderRowRequest
    """
    purchase_order_id: conint(strict=True, le=2147483647) = Field(...)
    quantity: Union[confloat(le=100000000000000000, strict=True), conint(le=2147483647, strict=True)] = Field(...)
    variant_id: conint(strict=True, le=2147483647) = Field(...)
    tax_rate_id: Optional[conint(strict=True, le=2147483647)] = None
    group_id: Optional[conint(strict=True, le=2147483647)] = None
    price_per_unit: Union[confloat(le=100000000000000000, ge=0, strict=True), conint(le=2147483647, ge=0, strict=True)] = Field(...)
    purchase_uom_conversion_rate: Optional[Union[confloat(le=100000000000000000, ge=0, strict=True), conint(le=2147483647, ge=0, strict=True)]] = None
    purchase_uom: Optional[constr(strict=True, max_length=7)] = None
    arrival_date: Optional[StrictStr] = Field(default=None, description="Optional arrival date in ISO 8601 format.")
    __properties = ["purchase_order_id", "quantity", "variant_id", "tax_rate_id", "group_id", "price_per_unit", "purchase_uom_conversion_rate", "purchase_uom", "arrival_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePurchaseOrderRowRequest:
        """Create an instance of CreatePurchaseOrderRowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePurchaseOrderRowRequest:
        """Create an instance of CreatePurchaseOrderRowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePurchaseOrderRowRequest.parse_obj(obj)

        _obj = CreatePurchaseOrderRowRequest.parse_obj({
            "purchase_order_id": obj.get("purchase_order_id"),
            "quantity": obj.get("quantity"),
            "variant_id": obj.get("variant_id"),
            "tax_rate_id": obj.get("tax_rate_id"),
            "group_id": obj.get("group_id"),
            "price_per_unit": obj.get("price_per_unit"),
            "purchase_uom_conversion_rate": obj.get("purchase_uom_conversion_rate"),
            "purchase_uom": obj.get("purchase_uom"),
            "arrival_date": obj.get("arrival_date")
        })
        return _obj


