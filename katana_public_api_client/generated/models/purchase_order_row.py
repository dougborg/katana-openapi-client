# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from katana_public_api_client.generated.models.purchase_order_row_all_of_landed_cost import PurchaseOrderRowAllOfLandedCost
from katana_public_api_client.generated.models.update_manufacturing_order_recipe_row_request_batch_transactions_inner import UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner

class PurchaseOrderRow(BaseModel):
    """
    PurchaseOrderRow
    """
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(default=None, description="Nullable deletion timestamp")
    id: Optional[StrictInt] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    variant_id: Optional[StrictInt] = None
    tax_rate_id: Optional[StrictInt] = None
    price_per_unit: Optional[Union[StrictFloat, StrictInt]] = None
    price_per_unit_in_base_currency: Optional[Union[StrictFloat, StrictInt]] = None
    purchase_uom_conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    purchase_uom: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = None
    total_in_base_currency: Optional[Union[StrictFloat, StrictInt]] = None
    conversion_date: Optional[datetime] = None
    received_date: Optional[datetime] = None
    arrival_date: Optional[datetime] = None
    batch_transactions: Optional[conlist(UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner)] = None
    purchase_order_id: Optional[StrictInt] = None
    landed_cost: Optional[PurchaseOrderRowAllOfLandedCost] = None
    group_id: Optional[StrictInt] = None
    __properties = ["created_at", "updated_at", "deleted_at", "id", "quantity", "variant_id", "tax_rate_id", "price_per_unit", "price_per_unit_in_base_currency", "purchase_uom_conversion_rate", "purchase_uom", "currency", "conversion_rate", "total", "total_in_base_currency", "conversion_date", "received_date", "arrival_date", "batch_transactions", "purchase_order_id", "landed_cost", "group_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PurchaseOrderRow:
        """Create an instance of PurchaseOrderRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in batch_transactions (list)
        _items = []
        if self.batch_transactions:
            for _item in self.batch_transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['batch_transactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of landed_cost
        if self.landed_cost:
            _dict['landed_cost'] = self.landed_cost.to_dict()
        # set to None if conversion_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_rate is None and "conversion_rate" in self.__fields_set__:
            _dict['conversion_rate'] = None

        # set to None if conversion_date (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_date is None and "conversion_date" in self.__fields_set__:
            _dict['conversion_date'] = None

        # set to None if received_date (nullable) is None
        # and __fields_set__ contains the field
        if self.received_date is None and "received_date" in self.__fields_set__:
            _dict['received_date'] = None

        # set to None if arrival_date (nullable) is None
        # and __fields_set__ contains the field
        if self.arrival_date is None and "arrival_date" in self.__fields_set__:
            _dict['arrival_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PurchaseOrderRow:
        """Create an instance of PurchaseOrderRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PurchaseOrderRow.parse_obj(obj)

        _obj = PurchaseOrderRow.parse_obj({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "id": obj.get("id"),
            "quantity": obj.get("quantity"),
            "variant_id": obj.get("variant_id"),
            "tax_rate_id": obj.get("tax_rate_id"),
            "price_per_unit": obj.get("price_per_unit"),
            "price_per_unit_in_base_currency": obj.get("price_per_unit_in_base_currency"),
            "purchase_uom_conversion_rate": obj.get("purchase_uom_conversion_rate"),
            "purchase_uom": obj.get("purchase_uom"),
            "currency": obj.get("currency"),
            "conversion_rate": obj.get("conversion_rate"),
            "total": obj.get("total"),
            "total_in_base_currency": obj.get("total_in_base_currency"),
            "conversion_date": obj.get("conversion_date"),
            "received_date": obj.get("received_date"),
            "arrival_date": obj.get("arrival_date"),
            "batch_transactions": [UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner.from_dict(_item) for _item in obj.get("batch_transactions")] if obj.get("batch_transactions") is not None else None,
            "purchase_order_id": obj.get("purchase_order_id"),
            "landed_cost": PurchaseOrderRowAllOfLandedCost.from_dict(obj.get("landed_cost")) if obj.get("landed_cost") is not None else None,
            "group_id": obj.get("group_id")
        })
        return _obj


