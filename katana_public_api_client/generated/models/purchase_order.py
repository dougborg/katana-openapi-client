"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

from katana_public_api_client.generated.models.purchase_order_row import (
    PurchaseOrderRow,
)
from katana_public_api_client.generated.models.supplier import Supplier


class PurchaseOrder(BaseModel):
    """
    PurchaseOrder
    """

    created_at: datetime | None = None
    updated_at: datetime | None = None
    deleted_at: StrictStr | None = Field(
        default=None, description="Nullable deletion timestamp"
    )
    id: StrictInt | None = None
    status: StrictStr | None = None
    order_no: StrictStr | None = None
    entity_type: StrictStr | None = None
    default_group_id: StrictInt | None = None
    supplier_id: StrictInt | None = None
    currency: StrictStr | None = None
    expected_arrival_date: StrictStr | None = None
    order_created_date: StrictStr | None = None
    additional_info: StrictStr | None = None
    location_id: StrictInt | None = None
    tracking_location_id: StrictInt | None = None
    total: StrictFloat | StrictInt | None = None
    total_in_base_currency: StrictFloat | StrictInt | None = None
    billing_status: StrictStr | None = None
    last_document_status: StrictStr | None = None
    ingredient_availability: StrictStr | None = None
    ingredient_expected_date: StrictStr | None = None
    purchase_order_rows: conlist(PurchaseOrderRow) | None = None
    supplier: Supplier | None = None
    __properties = [
        "created_at",
        "updated_at",
        "deleted_at",
        "id",
        "status",
        "order_no",
        "entity_type",
        "default_group_id",
        "supplier_id",
        "currency",
        "expected_arrival_date",
        "order_created_date",
        "additional_info",
        "location_id",
        "tracking_location_id",
        "total",
        "total_in_base_currency",
        "billing_status",
        "last_document_status",
        "ingredient_availability",
        "ingredient_expected_date",
        "purchase_order_rows",
        "supplier",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PurchaseOrder:
        """Create an instance of PurchaseOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in purchase_order_rows (list)
        _items = []
        if self.purchase_order_rows:
            for _item in self.purchase_order_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["purchase_order_rows"] = _items
        # override the default output from pydantic by calling `to_dict()` of supplier
        if self.supplier:
            _dict["supplier"] = self.supplier.to_dict()
        # set to None if tracking_location_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.tracking_location_id is None
            and "tracking_location_id" in self.__fields_set__
        ):
            _dict["tracking_location_id"] = None

        # set to None if ingredient_availability (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ingredient_availability is None
            and "ingredient_availability" in self.__fields_set__
        ):
            _dict["ingredient_availability"] = None

        # set to None if ingredient_expected_date (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ingredient_expected_date is None
            and "ingredient_expected_date" in self.__fields_set__
        ):
            _dict["ingredient_expected_date"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PurchaseOrder:
        """Create an instance of PurchaseOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PurchaseOrder.parse_obj(obj)

        _obj = PurchaseOrder.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "deleted_at": obj.get("deleted_at"),
                "id": obj.get("id"),
                "status": obj.get("status"),
                "order_no": obj.get("order_no"),
                "entity_type": obj.get("entity_type"),
                "default_group_id": obj.get("default_group_id"),
                "supplier_id": obj.get("supplier_id"),
                "currency": obj.get("currency"),
                "expected_arrival_date": obj.get("expected_arrival_date"),
                "order_created_date": obj.get("order_created_date"),
                "additional_info": obj.get("additional_info"),
                "location_id": obj.get("location_id"),
                "tracking_location_id": obj.get("tracking_location_id"),
                "total": obj.get("total"),
                "total_in_base_currency": obj.get("total_in_base_currency"),
                "billing_status": obj.get("billing_status"),
                "last_document_status": obj.get("last_document_status"),
                "ingredient_availability": obj.get("ingredient_availability"),
                "ingredient_expected_date": obj.get("ingredient_expected_date"),
                "purchase_order_rows": [
                    PurchaseOrderRow.from_dict(_item)
                    for _item in obj.get("purchase_order_rows")
                ]
                if obj.get("purchase_order_rows") is not None
                else None,
                "supplier": Supplier.from_dict(obj.get("supplier"))
                if obj.get("supplier") is not None
                else None,
            }
        )
        return _obj
