# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)
from katana_public_api_client.generated.models.update_manufacturing_order_recipe_row_request_batch_transactions_inner import (
    UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner,
)


class OutsourcedPurchaseOrderRecipeRow(BaseModel):
    """
    OutsourcedPurchaseOrderRecipeRow
    """

    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(
        default=None, description="Nullable deletion timestamp"
    )
    id: Optional[StrictInt] = None
    purchase_order_id: Optional[StrictInt] = None
    purchase_order_row_id: StrictInt = Field(...)
    ingredient_variant_id: StrictInt = Field(...)
    planned_quantity_per_unit: StrictInt = Field(...)
    ingredient_availability: Optional[StrictStr] = None
    ingredient_expected_date: Optional[datetime] = None
    notes: Optional[StrictStr] = None
    batch_transactions: Optional[
        conlist(UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner)
    ] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = [
        "created_at",
        "updated_at",
        "deleted_at",
        "id",
        "purchase_order_id",
        "purchase_order_row_id",
        "ingredient_variant_id",
        "planned_quantity_per_unit",
        "ingredient_availability",
        "ingredient_expected_date",
        "notes",
        "batch_transactions",
        "cost",
    ]

    @validator("ingredient_availability")
    def ingredient_availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "PROCESSED",
            "IN_STOCK",
            "NOT_AVAILABLE",
            "EXPECTED",
            "NOT_APPLICABLE",
        ):
            raise ValueError(
                "must be one of enum values ('PROCESSED', 'IN_STOCK', 'NOT_AVAILABLE', 'EXPECTED', 'NOT_APPLICABLE')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OutsourcedPurchaseOrderRecipeRow:
        """Create an instance of OutsourcedPurchaseOrderRecipeRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in batch_transactions (list)
        _items = []
        if self.batch_transactions:
            for _item in self.batch_transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["batch_transactions"] = _items
        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict["notes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OutsourcedPurchaseOrderRecipeRow:
        """Create an instance of OutsourcedPurchaseOrderRecipeRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OutsourcedPurchaseOrderRecipeRow.parse_obj(obj)

        _obj = OutsourcedPurchaseOrderRecipeRow.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "deleted_at": obj.get("deleted_at"),
                "id": obj.get("id"),
                "purchase_order_id": obj.get("purchase_order_id"),
                "purchase_order_row_id": obj.get("purchase_order_row_id"),
                "ingredient_variant_id": obj.get("ingredient_variant_id"),
                "planned_quantity_per_unit": obj.get("planned_quantity_per_unit"),
                "ingredient_availability": obj.get("ingredient_availability"),
                "ingredient_expected_date": obj.get("ingredient_expected_date"),
                "notes": obj.get("notes"),
                "batch_transactions": [
                    UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner.from_dict(
                        _item
                    )
                    for _item in obj.get("batch_transactions")
                ]
                if obj.get("batch_transactions") is not None
                else None,
                "cost": obj.get("cost"),
            }
        )
        return _obj
