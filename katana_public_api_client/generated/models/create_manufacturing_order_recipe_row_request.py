# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from katana_public_api_client.generated.models.create_manufacturing_order_recipe_row_request_batch_transactions_inner import CreateManufacturingOrderRecipeRowRequestBatchTransactionsInner

class CreateManufacturingOrderRecipeRowRequest(BaseModel):
    """
    CreateManufacturingOrderRecipeRowRequest
    """
    manufacturing_order_id: StrictInt = Field(...)
    variant_id: StrictInt = Field(...)
    notes: Optional[StrictStr] = None
    planned_quantity_per_unit: Union[StrictFloat, StrictInt] = Field(...)
    total_actual_quantity: Optional[Union[StrictFloat, StrictInt]] = None
    ingredient_availability: Optional[StrictStr] = None
    ingredient_expected_date: Optional[datetime] = None
    batch_transactions: Optional[conlist(CreateManufacturingOrderRecipeRowRequestBatchTransactionsInner)] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["manufacturing_order_id", "variant_id", "notes", "planned_quantity_per_unit", "total_actual_quantity", "ingredient_availability", "ingredient_expected_date", "batch_transactions", "cost"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateManufacturingOrderRecipeRowRequest:
        """Create an instance of CreateManufacturingOrderRecipeRowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in batch_transactions (list)
        _items = []
        if self.batch_transactions:
            for _item in self.batch_transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['batch_transactions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateManufacturingOrderRecipeRowRequest:
        """Create an instance of CreateManufacturingOrderRecipeRowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateManufacturingOrderRecipeRowRequest.parse_obj(obj)

        _obj = CreateManufacturingOrderRecipeRowRequest.parse_obj({
            "manufacturing_order_id": obj.get("manufacturing_order_id"),
            "variant_id": obj.get("variant_id"),
            "notes": obj.get("notes"),
            "planned_quantity_per_unit": obj.get("planned_quantity_per_unit"),
            "total_actual_quantity": obj.get("total_actual_quantity"),
            "ingredient_availability": obj.get("ingredient_availability"),
            "ingredient_expected_date": obj.get("ingredient_expected_date"),
            "batch_transactions": [CreateManufacturingOrderRecipeRowRequestBatchTransactionsInner.from_dict(_item) for _item in obj.get("batch_transactions")] if obj.get("batch_transactions") is not None else None,
            "cost": obj.get("cost")
        })
        return _obj


