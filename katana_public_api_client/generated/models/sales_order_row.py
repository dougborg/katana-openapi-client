"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)

from katana_public_api_client.generated.models.sales_order_row_all_of_attributes import (
    SalesOrderRowAllOfAttributes,
)
from katana_public_api_client.generated.models.update_manufacturing_order_recipe_row_request_batch_transactions_inner import (
    UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner,
)


class SalesOrderRow(BaseModel):
    """
    SalesOrderRow
    """

    created_at: datetime | None = None
    updated_at: datetime | None = None
    id: StrictInt = Field(...)
    quantity: StrictFloat | StrictInt = Field(...)
    variant_id: StrictInt = Field(...)
    tax_rate_id: StrictInt | None = None
    location_id: StrictInt | None = None
    product_availability: StrictStr | None = None
    product_expected_date: datetime | None = None
    price_per_unit: StrictFloat | StrictInt | None = None
    price_per_unit_in_base_currency: StrictFloat | StrictInt | None = None
    total: StrictFloat | StrictInt | None = None
    total_in_base_currency: StrictFloat | StrictInt | None = None
    cogs_value: StrictFloat | StrictInt | None = None
    attributes: conlist(SalesOrderRowAllOfAttributes) | None = None
    batch_transactions: (
        conlist(UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner) | None
    ) = None
    serial_numbers: conlist(StrictInt) | None = None
    linked_manufacturing_order_id: StrictInt | None = None
    conversion_rate: StrictFloat | StrictInt | None = None
    conversion_date: datetime | None = None
    __properties = [
        "created_at",
        "updated_at",
        "id",
        "quantity",
        "variant_id",
        "tax_rate_id",
        "location_id",
        "product_availability",
        "product_expected_date",
        "price_per_unit",
        "price_per_unit_in_base_currency",
        "total",
        "total_in_base_currency",
        "cogs_value",
        "attributes",
        "batch_transactions",
        "serial_numbers",
        "linked_manufacturing_order_id",
        "conversion_rate",
        "conversion_date",
    ]

    @validator("product_availability")
    def product_availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "IN_STOCK",
            "EXPECTED",
            "PICKED",
            "NOT_AVAILABLE",
            "NOT_APPLICABLE",
        ):
            raise ValueError(
                "must be one of enum values ('IN_STOCK', 'EXPECTED', 'PICKED', 'NOT_AVAILABLE', 'NOT_APPLICABLE')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SalesOrderRow:
        """Create an instance of SalesOrderRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["attributes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in batch_transactions (list)
        _items = []
        if self.batch_transactions:
            for _item in self.batch_transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["batch_transactions"] = _items
        # set to None if tax_rate_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tax_rate_id is None and "tax_rate_id" in self.__fields_set__:
            _dict["tax_rate_id"] = None

        # set to None if location_id (nullable) is None
        # and __fields_set__ contains the field
        if self.location_id is None and "location_id" in self.__fields_set__:
            _dict["location_id"] = None

        # set to None if product_availability (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.product_availability is None
            and "product_availability" in self.__fields_set__
        ):
            _dict["product_availability"] = None

        # set to None if product_expected_date (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.product_expected_date is None
            and "product_expected_date" in self.__fields_set__
        ):
            _dict["product_expected_date"] = None

        # set to None if cogs_value (nullable) is None
        # and __fields_set__ contains the field
        if self.cogs_value is None and "cogs_value" in self.__fields_set__:
            _dict["cogs_value"] = None

        # set to None if linked_manufacturing_order_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.linked_manufacturing_order_id is None
            and "linked_manufacturing_order_id" in self.__fields_set__
        ):
            _dict["linked_manufacturing_order_id"] = None

        # set to None if conversion_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_rate is None and "conversion_rate" in self.__fields_set__:
            _dict["conversion_rate"] = None

        # set to None if conversion_date (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_date is None and "conversion_date" in self.__fields_set__:
            _dict["conversion_date"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SalesOrderRow:
        """Create an instance of SalesOrderRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SalesOrderRow.parse_obj(obj)

        _obj = SalesOrderRow.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "quantity": obj.get("quantity"),
                "variant_id": obj.get("variant_id"),
                "tax_rate_id": obj.get("tax_rate_id"),
                "location_id": obj.get("location_id"),
                "product_availability": obj.get("product_availability"),
                "product_expected_date": obj.get("product_expected_date"),
                "price_per_unit": obj.get("price_per_unit"),
                "price_per_unit_in_base_currency": obj.get(
                    "price_per_unit_in_base_currency"
                ),
                "total": obj.get("total"),
                "total_in_base_currency": obj.get("total_in_base_currency"),
                "cogs_value": obj.get("cogs_value"),
                "attributes": [
                    SalesOrderRowAllOfAttributes.from_dict(_item)
                    for _item in obj.get("attributes")
                ]
                if obj.get("attributes") is not None
                else None,
                "batch_transactions": [
                    UpdateManufacturingOrderRecipeRowRequestBatchTransactionsInner.from_dict(
                        _item
                    )
                    for _item in obj.get("batch_transactions")
                ]
                if obj.get("batch_transactions") is not None
                else None,
                "serial_numbers": obj.get("serial_numbers"),
                "linked_manufacturing_order_id": obj.get(
                    "linked_manufacturing_order_id"
                ),
                "conversion_rate": obj.get("conversion_rate"),
                "conversion_date": obj.get("conversion_date"),
            }
        )
        return _obj
