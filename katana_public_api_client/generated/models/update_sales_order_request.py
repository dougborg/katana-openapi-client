# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr


class UpdateSalesOrderRequest(BaseModel):
    """
    UpdateSalesOrderRequest
    """

    order_no: Optional[StrictStr] = None
    customer_id: Optional[StrictInt] = None
    delivery_date: Optional[StrictStr] = None
    additional_info: Optional[StrictStr] = None
    customer_ref: Optional[StrictStr] = None
    tracking_number: Optional[StrictStr] = None
    tracking_number_url: Optional[StrictStr] = None
    __properties = [
        "order_no",
        "customer_id",
        "delivery_date",
        "additional_info",
        "customer_ref",
        "tracking_number",
        "tracking_number_url",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateSalesOrderRequest:
        """Create an instance of UpdateSalesOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if delivery_date (nullable) is None
        # and __fields_set__ contains the field
        if self.delivery_date is None and "delivery_date" in self.__fields_set__:
            _dict["delivery_date"] = None

        # set to None if additional_info (nullable) is None
        # and __fields_set__ contains the field
        if self.additional_info is None and "additional_info" in self.__fields_set__:
            _dict["additional_info"] = None

        # set to None if customer_ref (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_ref is None and "customer_ref" in self.__fields_set__:
            _dict["customer_ref"] = None

        # set to None if tracking_number (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_number is None and "tracking_number" in self.__fields_set__:
            _dict["tracking_number"] = None

        # set to None if tracking_number_url (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.tracking_number_url is None
            and "tracking_number_url" in self.__fields_set__
        ):
            _dict["tracking_number_url"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateSalesOrderRequest:
        """Create an instance of UpdateSalesOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateSalesOrderRequest.parse_obj(obj)

        _obj = UpdateSalesOrderRequest.parse_obj(
            {
                "order_no": obj.get("order_no"),
                "customer_id": obj.get("customer_id"),
                "delivery_date": obj.get("delivery_date"),
                "additional_info": obj.get("additional_info"),
                "customer_ref": obj.get("customer_ref"),
                "tracking_number": obj.get("tracking_number"),
                "tracking_number_url": obj.get("tracking_number_url"),
            }
        )
        return _obj
