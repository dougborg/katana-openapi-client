# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator

class InventoryMovement(BaseModel):
    """
    InventoryMovement
    """
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    id: StrictInt = Field(default=..., description="Unique identifier for the inventory movement.")
    variant_id: StrictInt = Field(default=..., description="Identifier of the product variant associated with the movement.")
    location_id: StrictInt = Field(default=..., description="Identifier of the location where the movement occurred.")
    resource_type: StrictStr = Field(default=..., description="The type of resource that caused the movement.")
    resource_id: Optional[StrictInt] = Field(default=None, description="Identifier of the resource that initiated the movement.")
    caused_by_order_no: Optional[StrictStr] = Field(default=None, description="Order number that triggered the movement.")
    caused_by_resource_id: Optional[StrictInt] = Field(default=None, description="Identifier for the resource that caused the movement.")
    movement_date: datetime = Field(default=..., description="Date and time when the inventory movement occurred.")
    quantity_change: Union[StrictFloat, StrictInt] = Field(default=..., description="The change in quantity as a result of the movement.")
    balance_after: Union[StrictFloat, StrictInt] = Field(default=..., description="The quantity balance after the movement.")
    value_per_unit: Union[StrictFloat, StrictInt] = Field(default=..., description="The value per unit for the movement.")
    value_in_stock_after: Union[StrictFloat, StrictInt] = Field(default=..., description="The total value in stock after the movement.")
    average_cost_after: Union[StrictFloat, StrictInt] = Field(default=..., description="The average cost per unit after the movement.")
    rank: Optional[StrictInt] = Field(default=None, description="A rank or order index for the movement.")
    __properties = ["created_at", "updated_at", "id", "variant_id", "location_id", "resource_type", "resource_id", "caused_by_order_no", "caused_by_resource_id", "movement_date", "quantity_change", "balance_after", "value_per_unit", "value_in_stock_after", "average_cost_after", "rank"]

    @validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('PurchaseOrderRow', 'PurchaseOrderRecipeRow', 'SalesOrderRow', 'ManufacturingOrderRecipeRow', 'StockAdjustmentRow', 'StockTransferRow', 'ManufacturingOrder', 'SystemGenerated',):
            raise ValueError("must be one of enum values ('PurchaseOrderRow', 'PurchaseOrderRecipeRow', 'SalesOrderRow', 'ManufacturingOrderRecipeRow', 'StockAdjustmentRow', 'StockTransferRow', 'ManufacturingOrder', 'SystemGenerated')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InventoryMovement:
        """Create an instance of InventoryMovement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InventoryMovement:
        """Create an instance of InventoryMovement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InventoryMovement.parse_obj(obj)

        _obj = InventoryMovement.parse_obj({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "id": obj.get("id"),
            "variant_id": obj.get("variant_id"),
            "location_id": obj.get("location_id"),
            "resource_type": obj.get("resource_type"),
            "resource_id": obj.get("resource_id"),
            "caused_by_order_no": obj.get("caused_by_order_no"),
            "caused_by_resource_id": obj.get("caused_by_resource_id"),
            "movement_date": obj.get("movement_date"),
            "quantity_change": obj.get("quantity_change"),
            "balance_after": obj.get("balance_after"),
            "value_per_unit": obj.get("value_per_unit"),
            "value_in_stock_after": obj.get("value_in_stock_after"),
            "average_cost_after": obj.get("average_cost_after"),
            "rank": obj.get("rank")
        })
        return _obj


