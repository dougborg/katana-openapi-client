# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, conlist
from katana_public_api_client.generated.models.purchase_order_receive_row_batch_transactions_inner import (
    PurchaseOrderReceiveRowBatchTransactionsInner,
)


class PurchaseOrderReceiveRow(BaseModel):
    """
    PurchaseOrderReceiveRow
    """

    purchase_order_row_id: conint(strict=True, le=2147483647) = Field(...)
    quantity: Union[
        confloat(le=100000000000000000, strict=True), conint(le=2147483647, strict=True)
    ] = Field(...)
    received_date: Optional[StrictStr] = Field(
        default=None, description="Optional received date in ISO 8601 format."
    )
    batch_transactions: Optional[
        conlist(PurchaseOrderReceiveRowBatchTransactionsInner)
    ] = None
    additional_properties: Dict[str, Any] = {}
    __properties = [
        "purchase_order_row_id",
        "quantity",
        "received_date",
        "batch_transactions",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PurchaseOrderReceiveRow:
        """Create an instance of PurchaseOrderReceiveRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True, exclude={"additional_properties"}, exclude_none=True
        )
        # override the default output from pydantic by calling `to_dict()` of each item in batch_transactions (list)
        _items = []
        if self.batch_transactions:
            for _item in self.batch_transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["batch_transactions"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PurchaseOrderReceiveRow:
        """Create an instance of PurchaseOrderReceiveRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PurchaseOrderReceiveRow.parse_obj(obj)

        _obj = PurchaseOrderReceiveRow.parse_obj(
            {
                "purchase_order_row_id": obj.get("purchase_order_row_id"),
                "quantity": obj.get("quantity"),
                "received_date": obj.get("received_date"),
                "batch_transactions": [
                    PurchaseOrderReceiveRowBatchTransactionsInner.from_dict(_item)
                    for _item in obj.get("batch_transactions")
                ]
                if obj.get("batch_transactions") is not None
                else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
