"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

from katana_public_api_client.generated.models.custom_fields_collection_all_of_custom_fields import (
    CustomFieldsCollectionAllOfCustomFields,
)


class CustomFieldsCollection(BaseModel):
    """
    CustomFieldsCollection
    """

    created_at: datetime | None = None
    updated_at: datetime | None = None
    id: StrictInt = Field(...)
    name: StrictStr = Field(...)
    resource_type: StrictStr = Field(...)
    custom_fields: conlist(CustomFieldsCollectionAllOfCustomFields) | None = None
    __properties = [
        "created_at",
        "updated_at",
        "id",
        "name",
        "resource_type",
        "custom_fields",
    ]

    @validator("resource_type")
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "product",
            "material",
            "variant",
            "customer",
            "sales_order",
            "purchase_order",
            "stocktake",
        ):
            raise ValueError(
                "must be one of enum values ('product', 'material', 'variant', 'customer', 'sales_order', 'purchase_order', 'stocktake')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomFieldsCollection:
        """Create an instance of CustomFieldsCollection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item in self.custom_fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict["custom_fields"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomFieldsCollection:
        """Create an instance of CustomFieldsCollection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomFieldsCollection.parse_obj(obj)

        _obj = CustomFieldsCollection.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "resource_type": obj.get("resource_type"),
                "custom_fields": [
                    CustomFieldsCollectionAllOfCustomFields.from_dict(_item)
                    for _item in obj.get("custom_fields")
                ]
                if obj.get("custom_fields") is not None
                else None,
            }
        )
        return _obj
