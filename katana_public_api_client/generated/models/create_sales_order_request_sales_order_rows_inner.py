"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist

from katana_public_api_client.generated.models.sales_order_row_all_of_attributes import (
    SalesOrderRowAllOfAttributes,
)


class CreateSalesOrderRequestSalesOrderRowsInner(BaseModel):
    """
    CreateSalesOrderRequestSalesOrderRowsInner
    """

    quantity: StrictFloat | StrictInt = Field(...)
    variant_id: StrictInt = Field(...)
    tax_rate_id: StrictInt | None = None
    location_id: StrictInt | None = None
    price_per_unit: StrictFloat | StrictInt | None = None
    total_discount: StrictFloat | StrictInt | None = None
    attributes: conlist(SalesOrderRowAllOfAttributes) | None = None
    __properties = [
        "quantity",
        "variant_id",
        "tax_rate_id",
        "location_id",
        "price_per_unit",
        "total_discount",
        "attributes",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSalesOrderRequestSalesOrderRowsInner:
        """Create an instance of CreateSalesOrderRequestSalesOrderRowsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["attributes"] = _items
        # set to None if tax_rate_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tax_rate_id is None and "tax_rate_id" in self.__fields_set__:
            _dict["tax_rate_id"] = None

        # set to None if location_id (nullable) is None
        # and __fields_set__ contains the field
        if self.location_id is None and "location_id" in self.__fields_set__:
            _dict["location_id"] = None

        # set to None if price_per_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.price_per_unit is None and "price_per_unit" in self.__fields_set__:
            _dict["price_per_unit"] = None

        # set to None if total_discount (nullable) is None
        # and __fields_set__ contains the field
        if self.total_discount is None and "total_discount" in self.__fields_set__:
            _dict["total_discount"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSalesOrderRequestSalesOrderRowsInner:
        """Create an instance of CreateSalesOrderRequestSalesOrderRowsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSalesOrderRequestSalesOrderRowsInner.parse_obj(obj)

        _obj = CreateSalesOrderRequestSalesOrderRowsInner.parse_obj(
            {
                "quantity": obj.get("quantity"),
                "variant_id": obj.get("variant_id"),
                "tax_rate_id": obj.get("tax_rate_id"),
                "location_id": obj.get("location_id"),
                "price_per_unit": obj.get("price_per_unit"),
                "total_discount": obj.get("total_discount"),
                "attributes": [
                    SalesOrderRowAllOfAttributes.from_dict(_item)
                    for _item in obj.get("attributes")
                ]
                if obj.get("attributes") is not None
                else None,
            }
        )
        return _obj
