# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from katana_public_api_client.generated.models.location import Location
from katana_public_api_client.generated.models.variant import Variant

class Inventory(BaseModel):
    """
    Inventory
    """
    variant_id: StrictInt = Field(...)
    location_id: StrictInt = Field(...)
    reorder_point: StrictStr = Field(...)
    average_cost: StrictStr = Field(...)
    value_in_stock: StrictStr = Field(...)
    quantity_in_stock: StrictStr = Field(...)
    quantity_committed: StrictStr = Field(...)
    quantity_expected: StrictStr = Field(...)
    quantity_missing_or_excess: StrictStr = Field(...)
    quantity_potential: StrictStr = Field(...)
    variant: Optional[Variant] = None
    location: Optional[Location] = None
    __properties = ["variant_id", "location_id", "reorder_point", "average_cost", "value_in_stock", "quantity_in_stock", "quantity_committed", "quantity_expected", "quantity_missing_or_excess", "quantity_potential", "variant", "location"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Inventory:
        """Create an instance of Inventory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of variant
        if self.variant:
            _dict['variant'] = self.variant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Inventory:
        """Create an instance of Inventory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Inventory.parse_obj(obj)

        _obj = Inventory.parse_obj({
            "variant_id": obj.get("variant_id"),
            "location_id": obj.get("location_id"),
            "reorder_point": obj.get("reorder_point"),
            "average_cost": obj.get("average_cost"),
            "value_in_stock": obj.get("value_in_stock"),
            "quantity_in_stock": obj.get("quantity_in_stock"),
            "quantity_committed": obj.get("quantity_committed"),
            "quantity_expected": obj.get("quantity_expected"),
            "quantity_missing_or_excess": obj.get("quantity_missing_or_excess"),
            "quantity_potential": obj.get("quantity_potential"),
            "variant": Variant.from_dict(obj.get("variant")) if obj.get("variant") is not None else None,
            "location": Location.from_dict(obj.get("location")) if obj.get("location") is not None else None
        })
        return _obj


