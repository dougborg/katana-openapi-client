# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictStr,
    confloat,
    conint,
    conlist,
    constr,
)
from katana_public_api_client.generated.models.create_material_request_configs_inner import (
    CreateMaterialRequestConfigsInner,
)
from katana_public_api_client.generated.models.variant import Variant


class CreateMaterialRequest(BaseModel):
    """
    CreateMaterialRequest
    """

    name: StrictStr = Field(...)
    uom: Optional[constr(strict=True, max_length=7)] = None
    category_name: Optional[StrictStr] = None
    default_supplier_id: Optional[conint(strict=True, le=2147483647)] = None
    additional_info: Optional[StrictStr] = None
    batch_tracked: Optional[StrictBool] = None
    is_sellable: Optional[StrictBool] = None
    purchase_uom: Optional[constr(strict=True, max_length=7)] = None
    purchase_uom_conversion_rate: Optional[
        Union[
            confloat(le=1000000000000, strict=True), conint(le=2147483647, strict=True)
        ]
    ] = None
    configs: Optional[conlist(CreateMaterialRequestConfigsInner, min_items=1)] = None
    variants: conlist(Variant, min_items=1) = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = [
        "name",
        "uom",
        "category_name",
        "default_supplier_id",
        "additional_info",
        "batch_tracked",
        "is_sellable",
        "purchase_uom",
        "purchase_uom_conversion_rate",
        "configs",
        "variants",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateMaterialRequest:
        """Create an instance of CreateMaterialRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True, exclude={"additional_properties"}, exclude_none=True
        )
        # override the default output from pydantic by calling `to_dict()` of each item in configs (list)
        _items = []
        if self.configs:
            for _item in self.configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["configs"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item in self.variants:
                if _item:
                    _items.append(_item.to_dict())
            _dict["variants"] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateMaterialRequest:
        """Create an instance of CreateMaterialRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateMaterialRequest.parse_obj(obj)

        _obj = CreateMaterialRequest.parse_obj(
            {
                "name": obj.get("name"),
                "uom": obj.get("uom"),
                "category_name": obj.get("category_name"),
                "default_supplier_id": obj.get("default_supplier_id"),
                "additional_info": obj.get("additional_info"),
                "batch_tracked": obj.get("batch_tracked"),
                "is_sellable": obj.get("is_sellable"),
                "purchase_uom": obj.get("purchase_uom"),
                "purchase_uom_conversion_rate": obj.get("purchase_uom_conversion_rate"),
                "configs": [
                    CreateMaterialRequestConfigsInner.from_dict(_item)
                    for _item in obj.get("configs")
                ]
                if obj.get("configs") is not None
                else None,
                "variants": [Variant.from_dict(_item) for _item in obj.get("variants")]
                if obj.get("variants") is not None
                else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
