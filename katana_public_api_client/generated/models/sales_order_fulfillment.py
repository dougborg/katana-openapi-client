# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class SalesOrderFulfillment(BaseModel):
    """
    SalesOrderFulfillment
    """
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    id: StrictInt = Field(...)
    sales_order_id: StrictInt = Field(...)
    tracking_number: Optional[StrictStr] = None
    tracking_number_url: Optional[StrictStr] = None
    shipped_date: Optional[datetime] = None
    estimated_delivery_date: Optional[datetime] = None
    actual_delivery_date: Optional[datetime] = None
    shipping_cost: Optional[Union[StrictFloat, StrictInt]] = None
    shipping_method: Optional[StrictStr] = None
    carrier: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    __properties = ["created_at", "updated_at", "id", "sales_order_id", "tracking_number", "tracking_number_url", "shipped_date", "estimated_delivery_date", "actual_delivery_date", "shipping_cost", "shipping_method", "carrier", "notes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SalesOrderFulfillment:
        """Create an instance of SalesOrderFulfillment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if tracking_number (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_number is None and "tracking_number" in self.__fields_set__:
            _dict['tracking_number'] = None

        # set to None if tracking_number_url (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_number_url is None and "tracking_number_url" in self.__fields_set__:
            _dict['tracking_number_url'] = None

        # set to None if shipped_date (nullable) is None
        # and __fields_set__ contains the field
        if self.shipped_date is None and "shipped_date" in self.__fields_set__:
            _dict['shipped_date'] = None

        # set to None if estimated_delivery_date (nullable) is None
        # and __fields_set__ contains the field
        if self.estimated_delivery_date is None and "estimated_delivery_date" in self.__fields_set__:
            _dict['estimated_delivery_date'] = None

        # set to None if actual_delivery_date (nullable) is None
        # and __fields_set__ contains the field
        if self.actual_delivery_date is None and "actual_delivery_date" in self.__fields_set__:
            _dict['actual_delivery_date'] = None

        # set to None if shipping_cost (nullable) is None
        # and __fields_set__ contains the field
        if self.shipping_cost is None and "shipping_cost" in self.__fields_set__:
            _dict['shipping_cost'] = None

        # set to None if shipping_method (nullable) is None
        # and __fields_set__ contains the field
        if self.shipping_method is None and "shipping_method" in self.__fields_set__:
            _dict['shipping_method'] = None

        # set to None if carrier (nullable) is None
        # and __fields_set__ contains the field
        if self.carrier is None and "carrier" in self.__fields_set__:
            _dict['carrier'] = None

        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SalesOrderFulfillment:
        """Create an instance of SalesOrderFulfillment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SalesOrderFulfillment.parse_obj(obj)

        _obj = SalesOrderFulfillment.parse_obj({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "id": obj.get("id"),
            "sales_order_id": obj.get("sales_order_id"),
            "tracking_number": obj.get("tracking_number"),
            "tracking_number_url": obj.get("tracking_number_url"),
            "shipped_date": obj.get("shipped_date"),
            "estimated_delivery_date": obj.get("estimated_delivery_date"),
            "actual_delivery_date": obj.get("actual_delivery_date"),
            "shipping_cost": obj.get("shipping_cost"),
            "shipping_method": obj.get("shipping_method"),
            "carrier": obj.get("carrier"),
            "notes": obj.get("notes")
        })
        return _obj


