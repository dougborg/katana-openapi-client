"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import BaseModel, StrictFloat, StrictInt, conlist

from katana_public_api_client.generated.models.update_manufacturing_order_operation_row_request import (
    UpdateManufacturingOrderOperationRowRequest,
)
from katana_public_api_client.generated.models.update_manufacturing_order_production_ingredient_request import (
    UpdateManufacturingOrderProductionIngredientRequest,
)


class UpdateManufacturingOrderProductionRequest(BaseModel):
    """
    UpdateManufacturingOrderProductionRequest
    """

    quantity: StrictFloat | StrictInt | None = None
    production_date: datetime | None = None
    ingredients: conlist(UpdateManufacturingOrderProductionIngredientRequest) | None = (
        None
    )
    operations: conlist(UpdateManufacturingOrderOperationRowRequest) | None = None
    __properties = ["quantity", "production_date", "ingredients", "operations"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateManufacturingOrderProductionRequest:
        """Create an instance of UpdateManufacturingOrderProductionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ingredients (list)
        _items = []
        if self.ingredients:
            for _item in self.ingredients:
                if _item:
                    _items.append(_item.to_dict())
            _dict["ingredients"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in operations (list)
        _items = []
        if self.operations:
            for _item in self.operations:
                if _item:
                    _items.append(_item.to_dict())
            _dict["operations"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateManufacturingOrderProductionRequest:
        """Create an instance of UpdateManufacturingOrderProductionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateManufacturingOrderProductionRequest.parse_obj(obj)

        _obj = UpdateManufacturingOrderProductionRequest.parse_obj(
            {
                "quantity": obj.get("quantity"),
                "production_date": obj.get("production_date"),
                "ingredients": [
                    UpdateManufacturingOrderProductionIngredientRequest.from_dict(_item)
                    for _item in obj.get("ingredients")
                ]
                if obj.get("ingredients") is not None
                else None,
                "operations": [
                    UpdateManufacturingOrderOperationRowRequest.from_dict(_item)
                    for _item in obj.get("operations")
                ]
                if obj.get("operations") is not None
                else None,
            }
        )
        return _obj
