"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any

from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

from katana_public_api_client.generated.models.variant import Variant


class VariantResponseAllOfProductOrMaterial(BaseModel):
    """
    VariantResponseAllOfProductOrMaterial
    """

    id: StrictInt | None = None
    name: StrictStr | None = None
    uom: StrictStr | None = None
    category_name: StrictStr | None = None
    is_producible: StrictBool | None = None
    default_supplier_id: StrictInt | None = None
    is_purchasable: StrictBool | None = None
    type: StrictStr | None = None
    purchase_uom: StrictStr | None = None
    purchase_uom_conversion_rate: StrictFloat | StrictInt | None = None
    batch_tracked: StrictBool | None = None
    configs: conlist(dict[str, Any]) | None = None
    additional_info: StrictStr | None = None
    created_at: datetime | None = None
    updated_at: datetime | None = None
    variants: conlist(Variant) | None = None
    __properties = [
        "id",
        "name",
        "uom",
        "category_name",
        "is_producible",
        "default_supplier_id",
        "is_purchasable",
        "type",
        "purchase_uom",
        "purchase_uom_conversion_rate",
        "batch_tracked",
        "configs",
        "additional_info",
        "created_at",
        "updated_at",
        "variants",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VariantResponseAllOfProductOrMaterial:
        """Create an instance of VariantResponseAllOfProductOrMaterial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item in self.variants:
                if _item:
                    _items.append(_item.to_dict())
            _dict["variants"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VariantResponseAllOfProductOrMaterial:
        """Create an instance of VariantResponseAllOfProductOrMaterial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VariantResponseAllOfProductOrMaterial.parse_obj(obj)

        _obj = VariantResponseAllOfProductOrMaterial.parse_obj(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "uom": obj.get("uom"),
                "category_name": obj.get("category_name"),
                "is_producible": obj.get("is_producible"),
                "default_supplier_id": obj.get("default_supplier_id"),
                "is_purchasable": obj.get("is_purchasable"),
                "type": obj.get("type"),
                "purchase_uom": obj.get("purchase_uom"),
                "purchase_uom_conversion_rate": obj.get("purchase_uom_conversion_rate"),
                "batch_tracked": obj.get("batch_tracked"),
                "configs": obj.get("configs"),
                "additional_info": obj.get("additional_info"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "variants": [Variant.from_dict(_item) for _item in obj.get("variants")]
                if obj.get("variants") is not None
                else None,
            }
        )
        return _obj
