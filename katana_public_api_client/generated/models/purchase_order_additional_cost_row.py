# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class PurchaseOrderAdditionalCostRow(BaseModel):
    """
    PurchaseOrderAdditionalCostRow
    """
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(default=None, description="Nullable deletion timestamp")
    id: Optional[StrictInt] = None
    additional_cost_id: Optional[StrictInt] = None
    group_id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    distribution_method: Optional[StrictStr] = None
    tax_rate_id: Optional[StrictInt] = None
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_in_base: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    currency_conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    currency_conversion_rate_fix_date: Optional[datetime] = None
    __properties = ["created_at", "updated_at", "deleted_at", "id", "additional_cost_id", "group_id", "name", "distribution_method", "tax_rate_id", "tax_rate", "price", "price_in_base", "currency", "currency_conversion_rate", "currency_conversion_rate_fix_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PurchaseOrderAdditionalCostRow:
        """Create an instance of PurchaseOrderAdditionalCostRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PurchaseOrderAdditionalCostRow:
        """Create an instance of PurchaseOrderAdditionalCostRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PurchaseOrderAdditionalCostRow.parse_obj(obj)

        _obj = PurchaseOrderAdditionalCostRow.parse_obj({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "id": obj.get("id"),
            "additional_cost_id": obj.get("additional_cost_id"),
            "group_id": obj.get("group_id"),
            "name": obj.get("name"),
            "distribution_method": obj.get("distribution_method"),
            "tax_rate_id": obj.get("tax_rate_id"),
            "tax_rate": obj.get("tax_rate"),
            "price": obj.get("price"),
            "price_in_base": obj.get("price_in_base"),
            "currency": obj.get("currency"),
            "currency_conversion_rate": obj.get("currency_conversion_rate"),
            "currency_conversion_rate_fix_date": obj.get("currency_conversion_rate_fix_date")
        })
        return _obj


