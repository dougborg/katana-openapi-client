"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr


class UpdateBomRowRequest(BaseModel):
    """
    UpdateBomRowRequest
    """

    ingredient_variant_id: StrictInt | None = None
    quantity: StrictFloat | StrictInt | None = None
    notes: StrictStr | None = None
    __properties = ["ingredient_variant_id", "quantity", "notes"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateBomRowRequest:
        """Create an instance of UpdateBomRowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict["notes"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateBomRowRequest:
        """Create an instance of UpdateBomRowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateBomRowRequest.parse_obj(obj)

        _obj = UpdateBomRowRequest.parse_obj(
            {
                "ingredient_variant_id": obj.get("ingredient_variant_id"),
                "quantity": obj.get("quantity"),
                "notes": obj.get("notes"),
            }
        )
        return _obj
