# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr


class Customer(BaseModel):
    """
    Customer
    """

    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(
        default=None, description="Nullable deletion timestamp"
    )
    id: StrictInt = Field(...)
    name: StrictStr = Field(...)
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    company: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    reference_id: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    discount_rate: Optional[Union[StrictFloat, StrictInt]] = None
    default_billing_id: Optional[StrictInt] = None
    default_shipping_id: Optional[StrictInt] = None
    __properties = [
        "created_at",
        "updated_at",
        "deleted_at",
        "id",
        "name",
        "first_name",
        "last_name",
        "company",
        "email",
        "phone",
        "comment",
        "currency",
        "reference_id",
        "category",
        "discount_rate",
        "default_billing_id",
        "default_shipping_id",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Customer:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if first_name (nullable) is None
        # and __fields_set__ contains the field
        if self.first_name is None and "first_name" in self.__fields_set__:
            _dict["first_name"] = None

        # set to None if last_name (nullable) is None
        # and __fields_set__ contains the field
        if self.last_name is None and "last_name" in self.__fields_set__:
            _dict["last_name"] = None

        # set to None if company (nullable) is None
        # and __fields_set__ contains the field
        if self.company is None and "company" in self.__fields_set__:
            _dict["company"] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict["email"] = None

        # set to None if phone (nullable) is None
        # and __fields_set__ contains the field
        if self.phone is None and "phone" in self.__fields_set__:
            _dict["phone"] = None

        # set to None if comment (nullable) is None
        # and __fields_set__ contains the field
        if self.comment is None and "comment" in self.__fields_set__:
            _dict["comment"] = None

        # set to None if reference_id (nullable) is None
        # and __fields_set__ contains the field
        if self.reference_id is None and "reference_id" in self.__fields_set__:
            _dict["reference_id"] = None

        # set to None if category (nullable) is None
        # and __fields_set__ contains the field
        if self.category is None and "category" in self.__fields_set__:
            _dict["category"] = None

        # set to None if discount_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.discount_rate is None and "discount_rate" in self.__fields_set__:
            _dict["discount_rate"] = None

        # set to None if default_billing_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.default_billing_id is None
            and "default_billing_id" in self.__fields_set__
        ):
            _dict["default_billing_id"] = None

        # set to None if default_shipping_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.default_shipping_id is None
            and "default_shipping_id" in self.__fields_set__
        ):
            _dict["default_shipping_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Customer:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Customer.parse_obj(obj)

        _obj = Customer.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "deleted_at": obj.get("deleted_at"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "first_name": obj.get("first_name"),
                "last_name": obj.get("last_name"),
                "company": obj.get("company"),
                "email": obj.get("email"),
                "phone": obj.get("phone"),
                "comment": obj.get("comment"),
                "currency": obj.get("currency"),
                "reference_id": obj.get("reference_id"),
                "category": obj.get("category"),
                "discount_rate": obj.get("discount_rate"),
                "default_billing_id": obj.get("default_billing_id"),
                "default_shipping_id": obj.get("default_shipping_id"),
            }
        )
        return _obj
