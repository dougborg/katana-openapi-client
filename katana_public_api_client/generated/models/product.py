# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from katana_public_api_client.generated.models.material_all_of_configs import MaterialAllOfConfigs
from katana_public_api_client.generated.models.supplier import Supplier
from katana_public_api_client.generated.models.variant import Variant

class Product(BaseModel):
    """
    Product
    """
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    archived_at: Optional[StrictStr] = Field(default=None, description="Nullable archive timestamp")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    uom: Optional[StrictStr] = None
    category_name: Optional[StrictStr] = None
    is_sellable: Optional[StrictBool] = None
    is_producible: Optional[StrictBool] = None
    is_purchasable: Optional[StrictBool] = None
    is_auto_assembly: Optional[StrictBool] = None
    default_supplier_id: Optional[StrictInt] = None
    additional_info: Optional[StrictStr] = None
    batch_tracked: Optional[StrictBool] = None
    serial_tracked: Optional[StrictBool] = None
    operations_in_sequence: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    purchase_uom: Optional[StrictStr] = None
    purchase_uom_conversion_rate: Optional[Union[StrictFloat, StrictInt]] = None
    variants: Optional[conlist(Variant)] = None
    configs: Optional[conlist(MaterialAllOfConfigs)] = None
    custom_field_collection_id: Optional[StrictInt] = None
    supplier: Optional[Supplier] = None
    __properties = ["created_at", "updated_at", "archived_at", "id", "name", "uom", "category_name", "is_sellable", "is_producible", "is_purchasable", "is_auto_assembly", "default_supplier_id", "additional_info", "batch_tracked", "serial_tracked", "operations_in_sequence", "type", "purchase_uom", "purchase_uom_conversion_rate", "variants", "configs", "custom_field_collection_id", "supplier"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Product:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item in self.variants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in configs (list)
        _items = []
        if self.configs:
            for _item in self.configs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configs'] = _items
        # override the default output from pydantic by calling `to_dict()` of supplier
        if self.supplier:
            _dict['supplier'] = self.supplier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Product:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Product.parse_obj(obj)

        _obj = Product.parse_obj({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "archived_at": obj.get("archived_at"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "uom": obj.get("uom"),
            "category_name": obj.get("category_name"),
            "is_sellable": obj.get("is_sellable"),
            "is_producible": obj.get("is_producible"),
            "is_purchasable": obj.get("is_purchasable"),
            "is_auto_assembly": obj.get("is_auto_assembly"),
            "default_supplier_id": obj.get("default_supplier_id"),
            "additional_info": obj.get("additional_info"),
            "batch_tracked": obj.get("batch_tracked"),
            "serial_tracked": obj.get("serial_tracked"),
            "operations_in_sequence": obj.get("operations_in_sequence"),
            "type": obj.get("type"),
            "purchase_uom": obj.get("purchase_uom"),
            "purchase_uom_conversion_rate": obj.get("purchase_uom_conversion_rate"),
            "variants": [Variant.from_dict(_item) for _item in obj.get("variants")] if obj.get("variants") is not None else None,
            "configs": [MaterialAllOfConfigs.from_dict(_item) for _item in obj.get("configs")] if obj.get("configs") is not None else None,
            "custom_field_collection_id": obj.get("custom_field_collection_id"),
            "supplier": Supplier.from_dict(obj.get("supplier")) if obj.get("supplier") is not None else None
        })
        return _obj


