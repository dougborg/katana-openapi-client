# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)
from katana_public_api_client.generated.models.serial_number import SerialNumber


class ManufacturingOrder(BaseModel):
    """
    ManufacturingOrder
    """

    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(
        default=None, description="Nullable deletion timestamp"
    )
    id: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    order_no: Optional[StrictStr] = None
    variant_id: Optional[StrictInt] = None
    planned_quantity: Optional[Union[StrictFloat, StrictInt]] = None
    actual_quantity: Optional[Union[StrictFloat, StrictInt]] = None
    location_id: Optional[StrictInt] = None
    order_created_date: Optional[datetime] = None
    production_deadline_date: Optional[datetime] = None
    additional_info: Optional[StrictStr] = None
    is_linked_to_sales_order: Optional[StrictBool] = None
    ingredient_availability: Optional[StrictStr] = None
    total_cost: Optional[Union[StrictFloat, StrictInt]] = None
    total_actual_time: Optional[Union[StrictFloat, StrictInt]] = None
    total_planned_time: Optional[Union[StrictFloat, StrictInt]] = None
    sales_order_id: Optional[StrictInt] = None
    sales_order_row_id: Optional[StrictInt] = None
    sales_order_delivery_deadline: Optional[datetime] = None
    material_cost: Optional[Union[StrictFloat, StrictInt]] = None
    subassemblies_cost: Optional[Union[StrictFloat, StrictInt]] = None
    operations_cost: Optional[Union[StrictFloat, StrictInt]] = None
    serial_numbers: Optional[conlist(SerialNumber)] = None
    __properties = [
        "created_at",
        "updated_at",
        "deleted_at",
        "id",
        "status",
        "order_no",
        "variant_id",
        "planned_quantity",
        "actual_quantity",
        "location_id",
        "order_created_date",
        "production_deadline_date",
        "additional_info",
        "is_linked_to_sales_order",
        "ingredient_availability",
        "total_cost",
        "total_actual_time",
        "total_planned_time",
        "sales_order_id",
        "sales_order_row_id",
        "sales_order_delivery_deadline",
        "material_cost",
        "subassemblies_cost",
        "operations_cost",
        "serial_numbers",
    ]

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NOT_STARTED",
            "BLOCKED",
            "IN_PROGRESS",
            "DONE",
        ):
            raise ValueError(
                "must be one of enum values ('NOT_STARTED', 'BLOCKED', 'IN_PROGRESS', 'DONE')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ManufacturingOrder:
        """Create an instance of ManufacturingOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in serial_numbers (list)
        _items = []
        if self.serial_numbers:
            for _item in self.serial_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict["serial_numbers"] = _items
        # set to None if actual_quantity (nullable) is None
        # and __fields_set__ contains the field
        if self.actual_quantity is None and "actual_quantity" in self.__fields_set__:
            _dict["actual_quantity"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ManufacturingOrder:
        """Create an instance of ManufacturingOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ManufacturingOrder.parse_obj(obj)

        _obj = ManufacturingOrder.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "deleted_at": obj.get("deleted_at"),
                "id": obj.get("id"),
                "status": obj.get("status"),
                "order_no": obj.get("order_no"),
                "variant_id": obj.get("variant_id"),
                "planned_quantity": obj.get("planned_quantity"),
                "actual_quantity": obj.get("actual_quantity"),
                "location_id": obj.get("location_id"),
                "order_created_date": obj.get("order_created_date"),
                "production_deadline_date": obj.get("production_deadline_date"),
                "additional_info": obj.get("additional_info"),
                "is_linked_to_sales_order": obj.get("is_linked_to_sales_order"),
                "ingredient_availability": obj.get("ingredient_availability"),
                "total_cost": obj.get("total_cost"),
                "total_actual_time": obj.get("total_actual_time"),
                "total_planned_time": obj.get("total_planned_time"),
                "sales_order_id": obj.get("sales_order_id"),
                "sales_order_row_id": obj.get("sales_order_row_id"),
                "sales_order_delivery_deadline": obj.get(
                    "sales_order_delivery_deadline"
                ),
                "material_cost": obj.get("material_cost"),
                "subassemblies_cost": obj.get("subassemblies_cost"),
                "operations_cost": obj.get("operations_cost"),
                "serial_numbers": [
                    SerialNumber.from_dict(_item) for _item in obj.get("serial_numbers")
                ]
                if obj.get("serial_numbers") is not None
                else None,
            }
        )
        return _obj
