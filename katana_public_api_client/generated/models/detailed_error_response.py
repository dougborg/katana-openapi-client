# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from katana_public_api_client.generated.models.validation_error_detail import ValidationErrorDetail

class DetailedErrorResponse(BaseModel):
    """
    DetailedErrorResponse
    """
    status_code: Union[StrictFloat, StrictInt] = Field(default=..., alias="statusCode", description="HTTP status code")
    name: StrictStr = Field(default=..., description="Error name/type")
    message: StrictStr = Field(default=..., description="Human-readable error message")
    code: Optional[StrictStr] = Field(default=None, description="Application-specific error code")
    details: Optional[conlist(ValidationErrorDetail)] = Field(default=None, description="Detailed validation error information")
    __properties = ["statusCode", "name", "message", "code", "details"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetailedErrorResponse:
        """Create an instance of DetailedErrorResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetailedErrorResponse:
        """Create an instance of DetailedErrorResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DetailedErrorResponse.parse_obj(obj)

        _obj = DetailedErrorResponse.parse_obj({
            "status_code": obj.get("statusCode"),
            "name": obj.get("name"),
            "message": obj.get("message"),
            "code": obj.get("code"),
            "details": [ValidationErrorDetail.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None
        })
        return _obj


