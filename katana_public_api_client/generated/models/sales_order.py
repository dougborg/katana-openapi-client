"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime

from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)

from katana_public_api_client.generated.models.sales_order_address import (
    SalesOrderAddress,
)
from katana_public_api_client.generated.models.sales_order_row import SalesOrderRow


class SalesOrder(BaseModel):
    """
    SalesOrder
    """

    created_at: datetime | None = None
    updated_at: datetime | None = None
    id: StrictInt = Field(...)
    customer_id: StrictInt = Field(...)
    order_no: StrictStr = Field(...)
    source: StrictStr | None = None
    order_created_date: datetime | None = None
    delivery_date: datetime | None = None
    picked_date: datetime | None = None
    location_id: StrictInt = Field(...)
    status: StrictStr = Field(...)
    currency: StrictStr | None = None
    conversion_rate: StrictFloat | StrictInt | None = None
    conversion_date: datetime | None = None
    invoicing_status: StrictStr | None = None
    total: StrictFloat | StrictInt | None = None
    total_in_base_currency: StrictFloat | StrictInt | None = None
    additional_info: StrictStr | None = None
    customer_ref: StrictStr | None = None
    sales_order_rows: conlist(SalesOrderRow) | None = None
    ecommerce_order_type: StrictStr | None = None
    ecommerce_store_name: StrictStr | None = None
    ecommerce_order_id: StrictStr | None = None
    product_availability: StrictStr | None = None
    product_expected_date: datetime | None = None
    ingredient_availability: StrictStr | None = None
    ingredient_expected_date: datetime | None = None
    production_status: StrictStr | None = None
    tracking_number: StrictStr | None = None
    tracking_number_url: StrictStr | None = None
    billing_address_id: StrictInt | None = None
    shipping_address_id: StrictInt | None = None
    addresses: conlist(SalesOrderAddress) | None = None
    __properties = [
        "created_at",
        "updated_at",
        "id",
        "customer_id",
        "order_no",
        "source",
        "order_created_date",
        "delivery_date",
        "picked_date",
        "location_id",
        "status",
        "currency",
        "conversion_rate",
        "conversion_date",
        "invoicing_status",
        "total",
        "total_in_base_currency",
        "additional_info",
        "customer_ref",
        "sales_order_rows",
        "ecommerce_order_type",
        "ecommerce_store_name",
        "ecommerce_order_id",
        "product_availability",
        "product_expected_date",
        "ingredient_availability",
        "ingredient_expected_date",
        "production_status",
        "tracking_number",
        "tracking_number_url",
        "billing_address_id",
        "shipping_address_id",
        "addresses",
    ]

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "NOT_SHIPPED",
            "PARTIALLY_PACKED",
            "PARTIALLY_DELIVERED",
            "PACKED",
            "DELIVERED",
            "PENDING",
        ):
            raise ValueError(
                "must be one of enum values ('NOT_SHIPPED', 'PARTIALLY_PACKED', 'PARTIALLY_DELIVERED', 'PACKED', 'DELIVERED', 'PENDING')"
            )
        return value

    @validator("product_availability")
    def product_availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "IN_STOCK",
            "EXPECTED",
            "PICKED",
            "NOT_AVAILABLE",
            "NOT_APPLICABLE",
        ):
            raise ValueError(
                "must be one of enum values ('IN_STOCK', 'EXPECTED', 'PICKED', 'NOT_AVAILABLE', 'NOT_APPLICABLE')"
            )
        return value

    @validator("ingredient_availability")
    def ingredient_availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "PROCESSED",
            "IN_STOCK",
            "NOT_AVAILABLE",
            "EXPECTED",
            "NO_RECIPE",
            "NOT_APPLICABLE",
        ):
            raise ValueError(
                "must be one of enum values ('PROCESSED', 'IN_STOCK', 'NOT_AVAILABLE', 'EXPECTED', 'NO_RECIPE', 'NOT_APPLICABLE')"
            )
        return value

    @validator("production_status")
    def production_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NOT_STARTED",
            "NONE",
            "NOT_APPLICABLE",
            "IN_PROGRESS",
            "BLOCKED",
            "DONE",
        ):
            raise ValueError(
                "must be one of enum values ('NOT_STARTED', 'NONE', 'NOT_APPLICABLE', 'IN_PROGRESS', 'BLOCKED', 'DONE')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SalesOrder:
        """Create an instance of SalesOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sales_order_rows (list)
        _items = []
        if self.sales_order_rows:
            for _item in self.sales_order_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["sales_order_rows"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict["addresses"] = _items
        # set to None if source (nullable) is None
        # and __fields_set__ contains the field
        if self.source is None and "source" in self.__fields_set__:
            _dict["source"] = None

        # set to None if delivery_date (nullable) is None
        # and __fields_set__ contains the field
        if self.delivery_date is None and "delivery_date" in self.__fields_set__:
            _dict["delivery_date"] = None

        # set to None if picked_date (nullable) is None
        # and __fields_set__ contains the field
        if self.picked_date is None and "picked_date" in self.__fields_set__:
            _dict["picked_date"] = None

        # set to None if conversion_rate (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_rate is None and "conversion_rate" in self.__fields_set__:
            _dict["conversion_rate"] = None

        # set to None if conversion_date (nullable) is None
        # and __fields_set__ contains the field
        if self.conversion_date is None and "conversion_date" in self.__fields_set__:
            _dict["conversion_date"] = None

        # set to None if invoicing_status (nullable) is None
        # and __fields_set__ contains the field
        if self.invoicing_status is None and "invoicing_status" in self.__fields_set__:
            _dict["invoicing_status"] = None

        # set to None if additional_info (nullable) is None
        # and __fields_set__ contains the field
        if self.additional_info is None and "additional_info" in self.__fields_set__:
            _dict["additional_info"] = None

        # set to None if customer_ref (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_ref is None and "customer_ref" in self.__fields_set__:
            _dict["customer_ref"] = None

        # set to None if ecommerce_order_type (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ecommerce_order_type is None
            and "ecommerce_order_type" in self.__fields_set__
        ):
            _dict["ecommerce_order_type"] = None

        # set to None if ecommerce_store_name (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ecommerce_store_name is None
            and "ecommerce_store_name" in self.__fields_set__
        ):
            _dict["ecommerce_store_name"] = None

        # set to None if ecommerce_order_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ecommerce_order_id is None
            and "ecommerce_order_id" in self.__fields_set__
        ):
            _dict["ecommerce_order_id"] = None

        # set to None if product_availability (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.product_availability is None
            and "product_availability" in self.__fields_set__
        ):
            _dict["product_availability"] = None

        # set to None if product_expected_date (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.product_expected_date is None
            and "product_expected_date" in self.__fields_set__
        ):
            _dict["product_expected_date"] = None

        # set to None if ingredient_availability (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ingredient_availability is None
            and "ingredient_availability" in self.__fields_set__
        ):
            _dict["ingredient_availability"] = None

        # set to None if ingredient_expected_date (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.ingredient_expected_date is None
            and "ingredient_expected_date" in self.__fields_set__
        ):
            _dict["ingredient_expected_date"] = None

        # set to None if production_status (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.production_status is None
            and "production_status" in self.__fields_set__
        ):
            _dict["production_status"] = None

        # set to None if tracking_number (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_number is None and "tracking_number" in self.__fields_set__:
            _dict["tracking_number"] = None

        # set to None if tracking_number_url (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.tracking_number_url is None
            and "tracking_number_url" in self.__fields_set__
        ):
            _dict["tracking_number_url"] = None

        # set to None if billing_address_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.billing_address_id is None
            and "billing_address_id" in self.__fields_set__
        ):
            _dict["billing_address_id"] = None

        # set to None if shipping_address_id (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.shipping_address_id is None
            and "shipping_address_id" in self.__fields_set__
        ):
            _dict["shipping_address_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SalesOrder:
        """Create an instance of SalesOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SalesOrder.parse_obj(obj)

        _obj = SalesOrder.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "customer_id": obj.get("customer_id"),
                "order_no": obj.get("order_no"),
                "source": obj.get("source"),
                "order_created_date": obj.get("order_created_date"),
                "delivery_date": obj.get("delivery_date"),
                "picked_date": obj.get("picked_date"),
                "location_id": obj.get("location_id"),
                "status": obj.get("status"),
                "currency": obj.get("currency"),
                "conversion_rate": obj.get("conversion_rate"),
                "conversion_date": obj.get("conversion_date"),
                "invoicing_status": obj.get("invoicing_status"),
                "total": obj.get("total"),
                "total_in_base_currency": obj.get("total_in_base_currency"),
                "additional_info": obj.get("additional_info"),
                "customer_ref": obj.get("customer_ref"),
                "sales_order_rows": [
                    SalesOrderRow.from_dict(_item)
                    for _item in obj.get("sales_order_rows")
                ]
                if obj.get("sales_order_rows") is not None
                else None,
                "ecommerce_order_type": obj.get("ecommerce_order_type"),
                "ecommerce_store_name": obj.get("ecommerce_store_name"),
                "ecommerce_order_id": obj.get("ecommerce_order_id"),
                "product_availability": obj.get("product_availability"),
                "product_expected_date": obj.get("product_expected_date"),
                "ingredient_availability": obj.get("ingredient_availability"),
                "ingredient_expected_date": obj.get("ingredient_expected_date"),
                "production_status": obj.get("production_status"),
                "tracking_number": obj.get("tracking_number"),
                "tracking_number_url": obj.get("tracking_number_url"),
                "billing_address_id": obj.get("billing_address_id"),
                "shipping_address_id": obj.get("shipping_address_id"),
                "addresses": [
                    SalesOrderAddress.from_dict(_item) for _item in obj.get("addresses")
                ]
                if obj.get("addresses") is not None
                else None,
            }
        )
        return _obj
