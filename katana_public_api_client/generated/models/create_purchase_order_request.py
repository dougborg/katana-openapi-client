"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, Field, StrictStr, conint, conlist, validator

from katana_public_api_client.generated.models.purchase_order_row_request import (
    PurchaseOrderRowRequest,
)


class CreatePurchaseOrderRequest(BaseModel):
    """
    CreatePurchaseOrderRequest
    """

    order_no: StrictStr = Field(...)
    entity_type: StrictStr | None = None
    supplier_id: conint(strict=True, le=2147483647) = Field(...)
    currency: StrictStr | None = Field(
        default=None, description="Active ISO 4217 currency code (e.g. USD, EUR)."
    )
    status: StrictStr | None = None
    expected_arrival_date: StrictStr | None = None
    order_created_date: StrictStr | None = None
    location_id: conint(strict=True, le=2147483647) = Field(...)
    tracking_location_id: conint(strict=True, le=2147483647) | None = Field(
        default=None, description="Submittable only when entity_type is outsourced"
    )
    additional_info: StrictStr | None = None
    purchase_order_rows: conlist(PurchaseOrderRowRequest, min_items=1) = Field(...)
    __properties = [
        "order_no",
        "entity_type",
        "supplier_id",
        "currency",
        "status",
        "expected_arrival_date",
        "order_created_date",
        "location_id",
        "tracking_location_id",
        "additional_info",
        "purchase_order_rows",
    ]

    @validator("entity_type")
    def entity_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "regular",
            "outsourced",
        ):
            raise ValueError("must be one of enum values ('regular', 'outsourced')")
        return value

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("NOT_RECEIVED",):
            raise ValueError("must be one of enum values ('NOT_RECEIVED')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePurchaseOrderRequest:
        """Create an instance of CreatePurchaseOrderRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in purchase_order_rows (list)
        _items = []
        if self.purchase_order_rows:
            for _item in self.purchase_order_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["purchase_order_rows"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePurchaseOrderRequest:
        """Create an instance of CreatePurchaseOrderRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePurchaseOrderRequest.parse_obj(obj)

        _obj = CreatePurchaseOrderRequest.parse_obj(
            {
                "order_no": obj.get("order_no"),
                "entity_type": obj.get("entity_type"),
                "supplier_id": obj.get("supplier_id"),
                "currency": obj.get("currency"),
                "status": obj.get("status"),
                "expected_arrival_date": obj.get("expected_arrival_date"),
                "order_created_date": obj.get("order_created_date"),
                "location_id": obj.get("location_id"),
                "tracking_location_id": obj.get("tracking_location_id"),
                "additional_info": obj.get("additional_info"),
                "purchase_order_rows": [
                    PurchaseOrderRowRequest.from_dict(_item)
                    for _item in obj.get("purchase_order_rows")
                ]
                if obj.get("purchase_order_rows") is not None
                else None,
            }
        )
        return _obj
