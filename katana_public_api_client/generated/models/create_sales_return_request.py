# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from katana_public_api_client.generated.models.create_sales_return_row_request import (
    CreateSalesReturnRowRequest,
)


class CreateSalesReturnRequest(BaseModel):
    """
    CreateSalesReturnRequest
    """

    customer_id: StrictInt = Field(
        default=..., description="ID of the customer initiating the return"
    )
    sales_order_id: Optional[StrictInt] = Field(
        default=None, description="ID of the original sales order being returned"
    )
    order_no: StrictStr = Field(
        default=..., description="Return order reference number"
    )
    return_location_id: StrictInt = Field(
        default=..., description="ID of the location where items are being returned to"
    )
    currency: Optional[StrictStr] = Field(
        default=None, description="Currency code (e.g., USD, EUR)"
    )
    order_created_date: Optional[datetime] = Field(
        default=None, description="Date when the original order was created"
    )
    additional_info: Optional[StrictStr] = Field(
        default=None, description="Optional notes or comments about the return"
    )
    sales_return_rows: conlist(CreateSalesReturnRowRequest) = Field(
        default=..., description="Array of items being returned"
    )
    __properties = [
        "customer_id",
        "sales_order_id",
        "order_no",
        "return_location_id",
        "currency",
        "order_created_date",
        "additional_info",
        "sales_return_rows",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateSalesReturnRequest:
        """Create an instance of CreateSalesReturnRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sales_return_rows (list)
        _items = []
        if self.sales_return_rows:
            for _item in self.sales_return_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict["sales_return_rows"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateSalesReturnRequest:
        """Create an instance of CreateSalesReturnRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateSalesReturnRequest.parse_obj(obj)

        _obj = CreateSalesReturnRequest.parse_obj(
            {
                "customer_id": obj.get("customer_id"),
                "sales_order_id": obj.get("sales_order_id"),
                "order_no": obj.get("order_no"),
                "return_location_id": obj.get("return_location_id"),
                "currency": obj.get("currency"),
                "order_created_date": obj.get("order_created_date"),
                "additional_info": obj.get("additional_info"),
                "sales_return_rows": [
                    CreateSalesReturnRowRequest.from_dict(_item)
                    for _item in obj.get("sales_return_rows")
                ]
                if obj.get("sales_return_rows") is not None
                else None,
            }
        )
        return _obj
