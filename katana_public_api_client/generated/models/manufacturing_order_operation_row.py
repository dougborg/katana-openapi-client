# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)
from katana_public_api_client.generated.models.operator import Operator


class ManufacturingOrderOperationRow(BaseModel):
    """
    ManufacturingOrderOperationRow
    """

    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(
        default=None, description="Nullable deletion timestamp"
    )
    id: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    rank: Optional[Union[StrictFloat, StrictInt]] = None
    manufacturing_order_id: Optional[StrictInt] = None
    operation_id: Optional[StrictInt] = None
    operation_name: Optional[StrictStr] = None
    resource_id: Optional[StrictInt] = None
    resource_name: Optional[StrictStr] = None
    assigned_operators: Optional[conlist(Operator)] = None
    completed_by_operators: Optional[conlist(Operator)] = None
    active_operator_id: Optional[Union[StrictFloat, StrictInt]] = None
    planned_time_per_unit: Optional[Union[StrictFloat, StrictInt]] = None
    planned_time_parameter: Optional[Union[StrictFloat, StrictInt]] = None
    total_actual_time: Optional[Union[StrictFloat, StrictInt]] = None
    planned_cost_per_unit: Optional[Union[StrictFloat, StrictInt]] = None
    total_actual_cost: Optional[Union[StrictFloat, StrictInt]] = None
    cost_per_hour: Optional[Union[StrictFloat, StrictInt]] = None
    cost_parameter: Optional[Union[StrictFloat, StrictInt]] = None
    group_boundary: Optional[Union[StrictFloat, StrictInt]] = None
    is_status_actionable: Optional[StrictBool] = None
    completed_at: Optional[datetime] = None
    __properties = [
        "created_at",
        "updated_at",
        "deleted_at",
        "id",
        "status",
        "type",
        "rank",
        "manufacturing_order_id",
        "operation_id",
        "operation_name",
        "resource_id",
        "resource_name",
        "assigned_operators",
        "completed_by_operators",
        "active_operator_id",
        "planned_time_per_unit",
        "planned_time_parameter",
        "total_actual_time",
        "planned_cost_per_unit",
        "total_actual_cost",
        "cost_per_hour",
        "cost_parameter",
        "group_boundary",
        "is_status_actionable",
        "completed_at",
    ]

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "IN_PROGRESS",
            "COMPLETED",
            "PAUSED",
        ):
            raise ValueError(
                "must be one of enum values ('IN_PROGRESS', 'COMPLETED', 'PAUSED')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ManufacturingOrderOperationRow:
        """Create an instance of ManufacturingOrderOperationRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in assigned_operators (list)
        _items = []
        if self.assigned_operators:
            for _item in self.assigned_operators:
                if _item:
                    _items.append(_item.to_dict())
            _dict["assigned_operators"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in completed_by_operators (list)
        _items = []
        if self.completed_by_operators:
            for _item in self.completed_by_operators:
                if _item:
                    _items.append(_item.to_dict())
            _dict["completed_by_operators"] = _items
        # set to None if completed_at (nullable) is None
        # and __fields_set__ contains the field
        if self.completed_at is None and "completed_at" in self.__fields_set__:
            _dict["completed_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ManufacturingOrderOperationRow:
        """Create an instance of ManufacturingOrderOperationRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ManufacturingOrderOperationRow.parse_obj(obj)

        _obj = ManufacturingOrderOperationRow.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "deleted_at": obj.get("deleted_at"),
                "id": obj.get("id"),
                "status": obj.get("status"),
                "type": obj.get("type"),
                "rank": obj.get("rank"),
                "manufacturing_order_id": obj.get("manufacturing_order_id"),
                "operation_id": obj.get("operation_id"),
                "operation_name": obj.get("operation_name"),
                "resource_id": obj.get("resource_id"),
                "resource_name": obj.get("resource_name"),
                "assigned_operators": [
                    Operator.from_dict(_item) for _item in obj.get("assigned_operators")
                ]
                if obj.get("assigned_operators") is not None
                else None,
                "completed_by_operators": [
                    Operator.from_dict(_item)
                    for _item in obj.get("completed_by_operators")
                ]
                if obj.get("completed_by_operators") is not None
                else None,
                "active_operator_id": obj.get("active_operator_id"),
                "planned_time_per_unit": obj.get("planned_time_per_unit"),
                "planned_time_parameter": obj.get("planned_time_parameter"),
                "total_actual_time": obj.get("total_actual_time"),
                "planned_cost_per_unit": obj.get("planned_cost_per_unit"),
                "total_actual_cost": obj.get("total_actual_cost"),
                "cost_per_hour": obj.get("cost_per_hour"),
                "cost_parameter": obj.get("cost_parameter"),
                "group_boundary": obj.get("group_boundary"),
                "is_status_actionable": obj.get("is_status_actionable"),
                "completed_at": obj.get("completed_at"),
            }
        )
        return _obj
