# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr


class PriceList(BaseModel):
    """
    PriceList
    """

    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(
        default=None, description="Nullable deletion timestamp"
    )
    id: StrictInt = Field(...)
    name: StrictStr = Field(...)
    currency: StrictStr = Field(...)
    is_default: Optional[StrictBool] = None
    markup_percentage: Optional[Union[StrictFloat, StrictInt]] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    __properties = [
        "created_at",
        "updated_at",
        "deleted_at",
        "id",
        "name",
        "currency",
        "is_default",
        "markup_percentage",
        "start_date",
        "end_date",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PriceList:
        """Create an instance of PriceList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if markup_percentage (nullable) is None
        # and __fields_set__ contains the field
        if (
            self.markup_percentage is None
            and "markup_percentage" in self.__fields_set__
        ):
            _dict["markup_percentage"] = None

        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict["start_date"] = None

        # set to None if end_date (nullable) is None
        # and __fields_set__ contains the field
        if self.end_date is None and "end_date" in self.__fields_set__:
            _dict["end_date"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PriceList:
        """Create an instance of PriceList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PriceList.parse_obj(obj)

        _obj = PriceList.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "deleted_at": obj.get("deleted_at"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "currency": obj.get("currency"),
                "is_default": obj.get("is_default"),
                "markup_percentage": obj.get("markup_percentage"),
                "start_date": obj.get("start_date"),
                "end_date": obj.get("end_date"),
            }
        )
        return _obj
