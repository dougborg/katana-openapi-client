# coding: utf-8

"""
    Katana Public API

    Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from katana_public_api_client.generated.models.sales_return_row import SalesReturnRow

class SalesReturn(BaseModel):
    """
    SalesReturn
    """
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[StrictStr] = Field(default=None, description="Nullable deletion timestamp")
    id: StrictInt = Field(...)
    customer_id: StrictInt = Field(...)
    sales_order_id: Optional[StrictInt] = None
    order_no: StrictStr = Field(...)
    return_location_id: StrictInt = Field(...)
    status: StrictStr = Field(...)
    currency: Optional[StrictStr] = None
    return_date: Optional[datetime] = None
    order_created_date: Optional[datetime] = None
    additional_info: Optional[StrictStr] = None
    refund_status: Optional[StrictStr] = None
    sales_return_rows: Optional[conlist(SalesReturnRow)] = None
    __properties = ["created_at", "updated_at", "deleted_at", "id", "customer_id", "sales_order_id", "order_no", "return_location_id", "status", "currency", "return_date", "order_created_date", "additional_info", "refund_status", "sales_return_rows"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DRAFT', 'RETURNED', 'CANCELLED',):
            raise ValueError("must be one of enum values ('DRAFT', 'RETURNED', 'CANCELLED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SalesReturn:
        """Create an instance of SalesReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sales_return_rows (list)
        _items = []
        if self.sales_return_rows:
            for _item in self.sales_return_rows:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sales_return_rows'] = _items
        # set to None if sales_order_id (nullable) is None
        # and __fields_set__ contains the field
        if self.sales_order_id is None and "sales_order_id" in self.__fields_set__:
            _dict['sales_order_id'] = None

        # set to None if return_date (nullable) is None
        # and __fields_set__ contains the field
        if self.return_date is None and "return_date" in self.__fields_set__:
            _dict['return_date'] = None

        # set to None if additional_info (nullable) is None
        # and __fields_set__ contains the field
        if self.additional_info is None and "additional_info" in self.__fields_set__:
            _dict['additional_info'] = None

        # set to None if refund_status (nullable) is None
        # and __fields_set__ contains the field
        if self.refund_status is None and "refund_status" in self.__fields_set__:
            _dict['refund_status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SalesReturn:
        """Create an instance of SalesReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SalesReturn.parse_obj(obj)

        _obj = SalesReturn.parse_obj({
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "id": obj.get("id"),
            "customer_id": obj.get("customer_id"),
            "sales_order_id": obj.get("sales_order_id"),
            "order_no": obj.get("order_no"),
            "return_location_id": obj.get("return_location_id"),
            "status": obj.get("status"),
            "currency": obj.get("currency"),
            "return_date": obj.get("return_date"),
            "order_created_date": obj.get("order_created_date"),
            "additional_info": obj.get("additional_info"),
            "refund_status": obj.get("refund_status"),
            "sales_return_rows": [SalesReturnRow.from_dict(_item) for _item in obj.get("sales_return_rows")] if obj.get("sales_return_rows") is not None else None
        })
        return _obj


