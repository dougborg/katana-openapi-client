# coding: utf-8

"""
Katana Public API

Public API for Katana Manufacturing Resource Planning (MRP) platform.  This OpenAPI specification provides comprehensive access to Katana's manufacturing, inventory, sales, and purchasing capabilities.  **Key Features:** - Complete CRUD operations for all business objects - Real-time inventory management and tracking - Manufacturing order and BOM (Bill of Materials) management - Sales and purchase order processing - Webhook event notifications for real-time integrations - Rate limiting with retry headers for reliable API usage - Comprehensive pagination support for list endpoints  **API Limits:** - Rate limit: 60 requests per 60 seconds - Max page size: 250 records per request - Default page size: 50 records per request  **Webhook Events:** Subscribe to real-time notifications for 50+ event types including sales orders, manufacturing orders, inventory changes, and more.

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr


class SalesReturnRow(BaseModel):
    """
    SalesReturnRow
    """

    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    id: StrictInt = Field(...)
    sales_return_id: StrictInt = Field(...)
    variant_id: StrictInt = Field(...)
    quantity: Union[StrictFloat, StrictInt] = Field(...)
    return_reason_id: Optional[StrictInt] = None
    notes: Optional[StrictStr] = None
    unit_price: Optional[Union[StrictFloat, StrictInt]] = None
    total_price: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = [
        "created_at",
        "updated_at",
        "id",
        "sales_return_id",
        "variant_id",
        "quantity",
        "return_reason_id",
        "notes",
        "unit_price",
        "total_price",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SalesReturnRow:
        """Create an instance of SalesReturnRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if return_reason_id (nullable) is None
        # and __fields_set__ contains the field
        if self.return_reason_id is None and "return_reason_id" in self.__fields_set__:
            _dict["return_reason_id"] = None

        # set to None if notes (nullable) is None
        # and __fields_set__ contains the field
        if self.notes is None and "notes" in self.__fields_set__:
            _dict["notes"] = None

        # set to None if unit_price (nullable) is None
        # and __fields_set__ contains the field
        if self.unit_price is None and "unit_price" in self.__fields_set__:
            _dict["unit_price"] = None

        # set to None if total_price (nullable) is None
        # and __fields_set__ contains the field
        if self.total_price is None and "total_price" in self.__fields_set__:
            _dict["total_price"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SalesReturnRow:
        """Create an instance of SalesReturnRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SalesReturnRow.parse_obj(obj)

        _obj = SalesReturnRow.parse_obj(
            {
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "id": obj.get("id"),
                "sales_return_id": obj.get("sales_return_id"),
                "variant_id": obj.get("variant_id"),
                "quantity": obj.get("quantity"),
                "return_reason_id": obj.get("return_reason_id"),
                "notes": obj.get("notes"),
                "unit_price": obj.get("unit_price"),
                "total_price": obj.get("total_price"),
            }
        )
        return _obj
